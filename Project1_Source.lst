                  2   $LIST
0000              4   
0000              5   org 0000H
0000 020525       6      ljmp main
0003              7      
0003              8   ; Timer/Counter 0 overflow interrupt vector
000B              9   org 0x000B
000B 0203E2      10            ljmp Timer0_ISR
000E             11   ; Timer/Counter 1 overflow interrupt vector
001B             12   org 0x001B
001B 0203E5      13            ljmp Timer1_ISR   
001E             14   ; Timer/Counter 2 overflow interrupt vector
002B             15   org 0x002B
002B 32          16       reti
002C             17   
002C             18   ; These register definitions needed by 'math32.inc'
0030             19   DSEG at 30H
0030             20   x:   ds 4
0034             21   y:   ds 4
0038             22   bcd: ds 5
003D             23   
003D             24   Seed: ds 4
0041             25   Score1: ds 1
0042             26   Score2: ds 1
0043             27   
0000             28   BSEG
0000             29   mf: dbit 1
0001             30   HLbit: dbit 1
0002             31   abortFlag: dbit 1
0003             32   
0003             33   PlayerWin: dbit 1 ; flag to tell who won: 0 - playerOne, 1 - playerTwo
0004             34   
                570   $LIST
                 36   $LIST
02C2             38   
02C2             39   cseg
02C2             40   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
02C2             41   
02C2             42   TIMER0_RATE1   EQU 4000     ; 2000Hz squarewave (peak amplitude of CEM-1203 speaker) ; Pin 1.1
02C2             43   TIMER0_RELOAD1 EQU ((65536-(CLK/TIMER0_RATE1))) ; LOW TONE
02C2             44   TIMER0_RATE2   EQU 4200     ; 2100Hz squarewave (peak amplitude of CEM-1203 speaker) ; Pin 1.1
02C2             45   TIMER0_RELOAD2 EQU ((65536-(CLK/TIMER0_RATE2))) ; HIGH TONE
02C2             46   
02C2             47   ; These 'equ' must match the hardware wiring
02C2             48   LCD_RS equ P3.2
02C2             49   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
02C2             50   LCD_E  equ P3.3
02C2             51   LCD_D4 equ P3.4
02C2             52   LCD_D5 equ P3.5
02C2             53   LCD_D6 equ P3.6
02C2             54   LCD_D7 equ P3.7
02C2             55   
02C2             56   SOUND_OUT equ P1.1
02C2             57   BOOT_BUTTON equ P4.5
02C2             58   
                 60   	$LIST
036E             62   
036E             63   ;                     1234567890123456    <- This helps determine the location of the counter
036E 50657269    64   Initial_Message:  db 'Period (ns):   ', 0
     6F642028
     6E73293A
     20202000
037E 4E6F2073    65   No_Signal_Str:    db 'No signal      ', 0
     69676E61
     6C202020
     20202000
038E 4E6F2073    66   No_Signal_Str1:  db 'No signal T1', 0
     69676E61
     6C205431
     00
039B             67   
039B             68   ; Sends 10-digit BCD number in bcd to the LCD
039B             69   Display_10_digit_BCD:
039B C000        70            push ar0
039D A83C        70            mov r0, bcd+4
039F 120358      70            lcall ?Display_BCD
03A2 D000        70            pop ar0
03A4 C000        71            push ar0
03A6 A83B        71            mov r0, bcd+3
03A8 120358      71            lcall ?Display_BCD
03AB D000        71            pop ar0
03AD C000        72            push ar0
03AF A83A        72            mov r0, bcd+2
03B1 120358      72            lcall ?Display_BCD
03B4 D000        72            pop ar0
03B6 C000        73            push ar0
03B8 A839        73            mov r0, bcd+1
03BA 120358      73            lcall ?Display_BCD
03BD D000        73            pop ar0
03BF C000        74            push ar0
03C1 A838        74            mov r0, bcd+0
03C3 120358      74            lcall ?Display_BCD
03C6 D000        74            pop ar0
03C8 22          75            ret
03C9             76            
03C9             77   ;---------------------------------;
03C9             78   ; Routine to initialize the ISR   ;
03C9             79   ; for timer 0                     ;
03C9             80   ;---------------------------------;
03C9             81   Timer0_Init:
03C9 E589        82            mov a, TMOD
03CB 54F0        83            anl a, #0xf0 ; Clear the bits for timer 0
03CD 4401        84            orl a, #0x01 ; Configure timer 0 as 16-timer
03CF F589        85            mov TMOD, a
03D1 758CEA      86            mov TH0, #high(TIMER0_RELOAD1)
03D4 758A67      87            mov TL0, #low(TIMER0_RELOAD1)
03D7             88            ; Set autoreload value
03D7 75F4EA      89            mov RH0, #high(TIMER0_RELOAD1)
03DA 75F267      90            mov RL0, #low(TIMER0_RELOAD1)
03DD             91            ; Enable the timer and interrupts
03DD D2A9        92       setb ET0  ; Enable timer 0 interrupt
03DF C28C        93       clr TR0  ; DONT start timer 0 yet
03E1 22          94            ret
03E2             95   
03E2             96   ;---------------------------------;
03E2             97   ; ISR for timer 0.
03E2             98   ;---------------------------------;
03E2             99   Timer0_ISR:
03E2            100            ;clr TF0  ; According to the data sheet this is done for us already.
03E2 B291       101            cpl SOUND_OUT ; Connect speaker to P1.1!
03E4 32         102            reti
03E5            103   
03E5            104   Timer1_ISR: 
03E5            105            ;clr TF1 ; According to data sheet this is done for us already.
03E5 D2A0       106            setb P2.0
03E7 C0E0       107            push acc
03E9 7405       107            mov a, #5
03EB 14         107            dec a
03EC 120353     107            lcall ?Set_Cursor_1 ; Select column and row
03EF D0E0       107            pop acc
03F1 C0E0       108            push acc
03F3 7435       108            mov a, #'5'
03F5 120312     108            lcall ?WriteData
03F8 D0E0       108            pop acc
03FA C002       109            push AR2
03FC 7AFA       109            mov R2, #250
03FE 1202CD     109            lcall ?Wait_Milli_Seconds
0401 D002       109            pop AR2
0403 C0E0       110            push acc
0405 7406       110            mov a, #6
0407 14         110            dec a
0408 120353     110            lcall ?Set_Cursor_1 ; Select column and row
040B D0E0       110            pop acc
040D C0E0       111            push acc
040F 7436       111            mov a, #'6'
0411 120312     111            lcall ?WriteData
0414 D0E0       111            pop acc
0416 C002       112            push AR2
0418 7AFA       112            mov R2, #250
041A 1202CD     112            lcall ?Wait_Milli_Seconds
041D D002       112            pop AR2
041F C0E0       113            push acc
0421 7407       113            mov a, #7
0423 14         113            dec a
0424 120353     113            lcall ?Set_Cursor_1 ; Select column and row
0427 D0E0       113            pop acc
0429 C0E0       114            push acc
042B 7437       114            mov a, #'7'
042D 120312     114            lcall ?WriteData
0430 D0E0       114            pop acc
0432 C002       115            push AR2
0434 7AFA       115            mov R2, #250
0436 1202CD     115            lcall ?Wait_Milli_Seconds
0439 D002       115            pop AR2
043B C0E0       116            push acc
043D 7408       116            mov a, #8
043F 14         116            dec a
0440 120353     116            lcall ?Set_Cursor_1 ; Select column and row
0443 D0E0       116            pop acc
0445 C0E0       117            push acc
0447 7438       117            mov a, #'8'
0449 120312     117            lcall ?WriteData
044C D0E0       117            pop acc
044E C002       118            push AR2
0450 7AFA       118            mov R2, #250
0452 1202CD     118            lcall ?Wait_Milli_Seconds
0455 D002       118            pop AR2
0457 C0E0       119            push acc
0459 7409       119            mov a, #9
045B 14         119            dec a
045C 120353     119            lcall ?Set_Cursor_1 ; Select column and row
045F D0E0       119            pop acc
0461 C0E0       120            push acc
0463 7439       120            mov a, #'9'
0465 120312     120            lcall ?WriteData
0468 D0E0       120            pop acc
046A            121            ;setb abortFlag
046A 32         122            reti
046B            123   
046B            124   InitTimer1:
046B E589       125            mov a, TMOD
046D 540F       126            anl a, #0x0f ; Clear the bits for timer 1
046F 4410       127            orl a, #0x10 ; Configure timer 1 as 16-timer
0471 F589       128            mov TMOD, a
0473 758D00     129            mov TH1, #0
0476 758B00     130            mov TL1, #0
0479            131            ; Set autoreload value
0479 75F500     132            mov RH1, #0
047C 75F300     133            mov RL1, #0
047F D2AB       134            setb ET1 ; set timer1 interrupt to 1
0481 C28E       135            clr TR1 ; don't start timer right away
0483 22         136            ret
0484            137   
0484            138   ;Initializes timer/counter 2 as a 16-bit timer
0484            139   InitTimer2:
0484 75C800     140            mov T2CON, #0 ; Stop timer/counter.  Set as timer (clock input is pin 22.1184MHz).
0487            141            ; Set the reload value on overflow to zero (just in case is not zero)
0487 75CB00     142            mov RCAP2H, #0
048A 75CA00     143            mov RCAP2L, #0
048D D2AD       144            setb ET2
048F 22         145       ret
0490            146       
0490            147   Init_Seed:
0490            148            ; Wait for a push of the BOOT button
0490            149            ; to initialize random seed:
0490 D2CA       150            setb TR2
0492 20C5FD     151            jb BOOT_BUTTON, $
0495 C0E0       152            push acc
0497 7401       152            mov a, #1
0499 14         152            dec a
049A 120351     152            lcall ?Set_Cursor_2 ; Select column and row
049D D0E0       152            pop acc
049F C0E0       153            push acc
04A1 7421       153            mov a, #'!'
04A3 120312     153            lcall ?WriteData
04A6 D0E0       153            pop acc
04A8 85CD3D     154            mov Seed+0, TH2
04AB 753E01     155            mov Seed+1, #0x01
04AE 753F87     156       mov Seed+2, #0x87
04B1 85CC40     157       mov Seed+3, TL2
04B4 C2CA       158       clr TR2
04B6 22         159       ret
04B7            160       
04B7            161   Random:
04B7            162            ; Seed = 214013*Seed + 2531011
04B7 853D30     163            mov x+0, Seed+0
04BA 853E31     164            mov x+1, Seed+1
04BD 853F32     165            mov x+2, Seed+2
04C0 854033     166            mov x+3, Seed+3
04C3 7534FD     167            mov y+0, #low (214013 % 0x10000) 
04C6 753543     167            mov y+1, #high(214013 % 0x10000) 
04C9 753603     167            mov y+2, #low (214013 / 0x10000) 
04CC 753700     167            mov y+3, #high(214013 / 0x10000) 
04CF 1201A6     168            lcall mul32
04D2 7534C3     169            mov y+0, #low (2531011 % 0x10000) 
04D5 75359E     169            mov y+1, #high(2531011 % 0x10000) 
04D8 753626     169            mov y+2, #low (2531011 / 0x10000) 
04DB 753700     169            mov y+3, #high(2531011 / 0x10000) 
04DE 1200F1     170            lcall add32
04E1 85303D     171            mov Seed+0, x+0
04E4 85313E     172            mov Seed+1, x+1
04E7 85323F     173            mov Seed+2, x+2
04EA 853340     174            mov Seed+3, x+3
04ED 22         175            ret
04EE            176   
04EE            177   Wait_Random:
04EE C002       178            push AR2
04F0 AA3D       178            mov R2, Seed+0
04F2 1202CD     178            lcall ?Wait_Milli_Seconds
04F5 D002       178            pop AR2
04F7 C002       179            push AR2
04F9 AA3E       179            mov R2, Seed+1
04FB 1202CD     179            lcall ?Wait_Milli_Seconds
04FE D002       179            pop AR2
0500 C002       180            push AR2
0502 AA3F       180            mov R2, Seed+2
0504 1202CD     180            lcall ?Wait_Milli_Seconds
0507 D002       180            pop AR2
0509 C002       181            push AR2
050B AA40       181            mov R2, Seed+3
050D 1202CD     181            lcall ?Wait_Milli_Seconds
0510 D002       181            pop AR2
0512 22         182            ret
0513            183   
0513            184   ;---------------------------------;
0513            185   ; Hardware initialization         ;
0513            186   ;---------------------------------;
0513            187   Initialize_All:
0513 120484     188       lcall InitTimer2
0516 1203C9     189       lcall Timer0_Init
0519 12046B     190       lcall InitTImer1
051C 12031C     191       lcall LCD_4BIT ; Initialize LCD
051F D2AF       192       setb EA
0521 120490     193       lcall Init_Seed
0524            194            
0524 22         195            ret
0525            196   
0525            197   ;---------------------------------;
0525            198   ; Main program loop               ;
0525            199   ;---------------------------------;
0525            200   main:
0525            201       ; Initialize the hardware:
0525 75817F     202       mov SP, #7FH
0528 120513     203       lcall Initialize_All
052B D280       204       setb P0.0 ; Pin is used as input for 555 timer for timer/counter2
052D D281       205       setb P0.1 ; Pin for 555 timer for timer/counter1
052F C201       206       clr HLbit 
0531 C28C       207       clr TR0 ; clear timer 0 so no sound when game first starts
0533 C202       208       clr abortFlag
0535 754100     209       mov Score1, #0
0538 754200     210       mov Score2, #0
053B            211       
053B C2A0       212       clr P2.0
053D            213   
053D C0E0       214            push acc
053F 7401       214            mov a, #1
0541 14         214            dec a
0542 120353     214            lcall ?Set_Cursor_1 ; Select column and row
0545 D0E0       214            pop acc
0547            215       ;Send_Constant_String(#Initial_Message) 
0547            216       
0547            217   ; LETS SAY HIGHER TONE IS BADDDDDD
0547            218   forever:
0547            219   
0547            220            ; First part of the game: decide which freq to buzz at
0547 1204B7     221            lcall Random
054A E53E       222            mov a, Seed+1
054C A2E3       223            mov c, acc.3
054E 9201       224            mov HLbit, c
0550 4009       225            jc setup_tone2 ; if carry is one, we play tone2
0552            226            ; if carry is zero, we play tone1, the LOW tone
0552 75F4EA     227            mov RH0, #high(TIMER0_RELOAD1)
0555 75F267     228            mov RL0, #low(TIMER0_RELOAD1)
0558 020561     229            ljmp play
055B            230            
055B            231            setup_tone2: ; get ready to play tone2, the HIGH tone
055B 75F4EB     232                    mov RH0, #high(TIMER0_RELOAD2)
055E 75F26E     233                    mov RL0, #low(TIMER0_RELOAD2)
0561            234            
0561            235            
0561            236            play: ; activates tone
0561 D28E       237                    setb TR1 ; start timer1 
0563 D28C       238                    setb TR0
0565            239            
0565 12058A     240            lcall pin0period ; start check for capacitance (resulting in period) change
0568            241            
0568            242            ; When pin0_period returns, a player will have either won a point or lost a 
0568            243            ; point (unless already at zero). Now we need to update scoreboard and 
0568            244            ; if there is a winner, declare the winner
0568            245            
0568            246            ; to be done soon
0568            247            
0568            248            
0568            249            ; Wait a random time before playing the next sound
0568            250            ; Once a sound plays, it plays indefinitely till a slap occurs
0568            251            ; Once a slap occurs, calculate points, and wait to play the next sound
0568            252            ; To wait for a slap to occur, potentially use some sort of loop
0568            253            
0568 C28C       254            clr TR0
056A 1204EE     255            lcall Wait_Random ; wait a random amount of time before playing the next tone
056D 020547     256            ljmp forever
0570            257            
0570            258   tooSlow:
0570 C28F       259            clr TF1
0572 C202       260            clr abortFlag
0574 C0E0       261            push acc
0576 7405       261            mov a, #5
0578 14         261            dec a
0579 120353     261            lcall ?Set_Cursor_1 ; Select column and row
057C D0E0       261            pop acc
057E C0E0       262            push acc
0580 7424       262            mov a, #'$'
0582 120312     262            lcall ?WriteData
0585 D0E0       262            pop acc
0587 020547     263            ljmp forever
058A            264   
058A            265   ; Determine period of 555 Timer for player 1
058A            266   pin0period: 
058A 2002E3     267            jb abortFlag, tooSlow
058D            268       ; synchronize with rising edge of the signal applied to pin P0.0
058D C2CA       269       clr TR2 ; Stop timer 2
058F 75CC00     270       mov TL2, #0
0592 75CD00     271       mov TH2, #0
0595 C2CF       272       clr TF2 ; clear timer2 overflow flag
0597 D2CA       273       setb TR2
0599            274   synch1:
0599 20CF67     275            jb TF2, no_signal_helper ; If the timer overflows, we assume there is no signal
059C 2080FA     276       jb P0.0, synch1
059F            277   synch2:    
059F 20CF61     278            jb TF2, no_signal_helper
05A2 3080FA     279       jnb P0.0, synch2
05A5            280       
05A5            281       ; Measure the period of the signal applied to pin P0.0
05A5 C2CA       282       clr TR2
05A7 75CC00     283       mov TL2, #0
05AA 75CD00     284       mov TH2, #0
05AD C2CF       285       clr TF2
05AF D2CA       286       setb TR2 ; Start timer 2
05B1            287   measure1:
05B1 20CF75     288            jb TF2, no_signal
05B4 2080FA     289       jb P0.0, measure1
05B7            290   measure2:    
05B7 20CF6F     291            jb TF2, no_signal
05BA 3080FA     292       jnb P0.0, measure2
05BD C2CA       293       clr TR2 ; Stop timer 2, [TH2,TL2] * 45.21123ns is the period
05BF 75349B     294            mov y+0, #low (45211 % 0x10000) 
05C2 7535B0     294            mov y+1, #high(45211 % 0x10000) 
05C5 753600     294            mov y+2, #low (45211 / 0x10000) 
05C8 753700     294            mov y+3, #high(45211 / 0x10000) 
05CB 85CC30     295       mov x+0, TL2
05CE 85CD31     296       mov x+1, TH2
05D1 753200     297       mov x+2, #0
05D4 753300     298       mov x+3, #0
05D7 1201A6     299       lcall mul32
05DA 7534E8     300            mov y+0, #low (1000 % 0x10000) 
05DD 753503     300            mov y+1, #high(1000 % 0x10000) 
05E0 753600     300            mov y+2, #low (1000 / 0x10000) 
05E3 753700     300            mov y+3, #high(1000 / 0x10000) 
05E6 120233     301       lcall div32
05E9            302       
05E9 753480     303            mov y+0, #low (208000 % 0x10000) 
05EC 75352C     303            mov y+1, #high(208000 % 0x10000) 
05EF 753603     303            mov y+2, #low (208000 / 0x10000) 
05F2 753700     303            mov y+3, #high(208000 / 0x10000) 
05F5 120134     304       lcall x_lt_y
05F8 20002E     305       jb mf, no_signal
05FB            306       
05FB            307       ; Handle winning a point
05FB 200108     308       jb HLbit, dec_score1
05FE            309       ;mov a, Score1
05FE            310       ;add a, #1
05FE            311       ;da a
05FE            312       ;mov Score1, a
05FE 0541       313       inc Score1
0600 02060C     314       ljmp pin0_return
0603            315       
0603            316   no_signal_helper:
0603 020629     317            ljmp no_signal
0606            318       
0606            319   dec_score1:
0606 E541       320            mov a, Score1
0608 6002       321            jz pin0_return
060A            322            ;add a, #99
060A            323            ;da a
060A            324            ;mov Score1, a
060A 1541       325            dec Score1
060C            326   
060C            327   pin0_return:
060C            328            ; Convert the result to BCD and display on LCD
060C C0E0       329            push acc
060E 7401       329            mov a, #1
0610 14         329            dec a
0611 120353     329            lcall ?Set_Cursor_1 ; Select column and row
0614 D0E0       329            pop acc
0616 854130     330            mov x, Score1
0619 12063F     331            lcall zero_3x_bytes_0
061C 12002C     332            lcall hex2bcd
061F            333            ;lcall Display_10_digit_BCD
061F C000       334            push ar0
0621 A841       334            mov r0, Score1
0623 120358     334            lcall ?Display_BCD
0626 D000       334            pop ar0
0628 22         335       ret 
0629            336   
0629            337   no_signal:       
0629 C0E0       338            push acc
062B 740F       338            mov a, #15
062D 14         338            dec a
062E 120351     338            lcall ?Set_Cursor_2 ; Select column and row
0631 D0E0       338            pop acc
0633 C0E0       339            push acc
0635 7421       339            mov a, #'!'
0637 120312     339            lcall ?WriteData
063A D0E0       339            pop acc
063C 020649     340       ljmp pin1period
063F            341   
063F            342   zero_3x_bytes_0:
063F 753100     343            mov x+1, #0
0642 753200     344            mov x+2, #0
0645 753300     345            mov x+3, #0
0648 22         346            ret
0649            347   
0649            348   ; Determine period for 555 timer for player 2
0649            349   pin1period:
0649            350       ; synchronize with rising edge of the signal applied to pin P0.0
0649 C2CA       351       clr TR2 ; Stop timer 2
064B 75CC00     352       mov TL2, #0
064E 75CD00     353       mov TH2, #0
0651 C2CF       354       clr TF2 ; clear timer1 overflow flag
0653 D2CA       355       setb TR2
0655            356   synch1_1:
0655 20CF67     357            jb TF2, no_signal_1_helper ; If the timer overflows, we assume there is no signal
0658 2081FA     358       jb P0.1, synch1_1
065B            359   synch2_1:    
065B 20CF61     360            jb TF2, no_signal_1_helper
065E 3081FA     361       jnb P0.1, synch2_1
0661            362       
0661            363       ; Measure the period of the signal applied to pin P0.0
0661 C2CA       364       clr TR2
0663 75CC00     365       mov TL2, #0
0666 75CD00     366       mov TH2, #0
0669 C2CF       367       clr TF2
066B D2CA       368       setb TR2 ; Start timer 2
066D            369   measure1_1:
066D 20CF75     370            jb TF2, no_signal_1
0670 2081FA     371       jb P0.1, measure1_1
0673            372   measure2_1:    
0673 20CF6F     373            jb TF2, no_signal_1
0676 3081FA     374       jnb P0.1, measure2_1
0679 C2CA       375       clr TR2 ; Stop timer 2, [TH2,TL2] * 45.21123ns is the period
067B 75349B     376            mov y+0, #low (45211 % 0x10000) 
067E 7535B0     376            mov y+1, #high(45211 % 0x10000) 
0681 753600     376            mov y+2, #low (45211 / 0x10000) 
0684 753700     376            mov y+3, #high(45211 / 0x10000) 
0687 85CC30     377       mov x+0, TL2
068A 85CD31     378       mov x+1, TH2
068D 753200     379       mov x+2, #0
0690 753300     380       mov x+3, #0
0693 1201A6     381       lcall mul32
0696 7534E8     382            mov y+0, #low (1000 % 0x10000) 
0699 753503     382            mov y+1, #high(1000 % 0x10000) 
069C 753600     382            mov y+2, #low (1000 / 0x10000) 
069F 753700     382            mov y+3, #high(1000 / 0x10000) 
06A2 120233     383       lcall div32
06A5            384       
06A5 753480     385            mov y+0, #low (208000 % 0x10000) 
06A8 75352C     385            mov y+1, #high(208000 % 0x10000) 
06AB 753603     385            mov y+2, #low (208000 / 0x10000) 
06AE 753700     385            mov y+3, #high(208000 / 0x10000) 
06B1 120134     386       lcall x_lt_y
06B4 20002E     387       jb mf, no_signal_1
06B7            388       
06B7            389   ; Handle a press depending on tone
06B7 200108     390       jb HLbit, dec_score2
06BA            391       ;mov a, Score2
06BA            392       ;add a, #1
06BA            393       ;da a
06BA            394       ;mov Score1, a
06BA 0542       395       inc Score2
06BC 0206C8     396       ljmp pin1_return
06BF            397       
06BF            398   no_signal_1_helper:
06BF 0206E5     399            ljmp no_signal_1
06C2            400       
06C2            401   dec_score2:
06C2 E542       402            mov a, Score2
06C4 6002       403            jz pin1_return ; if already zero, go to end
06C6            404            ;add a, #99
06C6            405            ;da a
06C6            406            ;mov Score2, a
06C6 1542       407            dec Score2
06C8            408   
06C8            409   pin1_return:
06C8            410            ; Convert the result to BCD and display on LCD
06C8 C0E0       411            push acc
06CA 7401       411            mov a, #1
06CC 14         411            dec a
06CD 120351     411            lcall ?Set_Cursor_2 ; Select column and row
06D0 D0E0       411            pop acc
06D2 854230     412            mov x, Score2
06D5 1206FB     413            lcall zero_3x_bytes_1
06D8 12002C     414            lcall hex2bcd
06DB            415            ;lcall Display_10_digit_BCD
06DB C000       416            push ar0
06DD A842       416            mov r0, Score2
06DF 120358     416            lcall ?Display_BCD
06E2 D000       416            pop ar0
06E4 22         417       ret 
06E5            418       
06E5            419   no_signal_1:     
06E5 C0E0       420            push acc
06E7 740F       420            mov a, #15
06E9 14         420            dec a
06EA 120351     420            lcall ?Set_Cursor_2 ; Select column and row
06ED D0E0       420            pop acc
06EF C0E0       421            push acc
06F1 7421       421            mov a, #'!'
06F3 120312     421            lcall ?WriteData
06F6 D0E0       421            pop acc
06F8 02058A     422       ljmp pin0period ; Repeat! 
06FB            423       
06FB            424   zero_3x_bytes_1:
06FB 753100     425            mov x+1, #0
06FE 753200     426            mov x+2, #0
0701 753300     427            mov x+3, #0
0704 22         428            ret
0705            429   end
