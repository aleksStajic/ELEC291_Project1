                  2   $LIST
0000              4   
0000              5   org 0000H
0000 0204C6       6      ljmp main
0003              7      
0003              8   ; Timer/Counter 0 overflow interrupt vector
000B              9   org 0x000B
000B 0203E2      10            ljmp Timer0_ISR
000E             11   ; Timer/Counter 1 overflow interrupt vector
001B             12   org 0x001B
001B 0203E5      13            ljmp Timer1_ISR   
001E             14   ; Timer/Counter 2 overflow interrupt vector
002B             15   org 0x002B
002B 32          16       reti
002C             17   
002C             18   ; These register definitions needed by 'math32.inc'
0030             19   DSEG at 30H
0030             20   x:   ds 4
0034             21   y:   ds 4
0038             22   bcd: ds 5
003D             23   Count1ms: ds 2
003F             24   
003F             25   Seed: ds 4
0043             26   Score1: ds 1
0044             27   Score2: ds 1
0045             28   
0000             29   BSEG
0000             30   mf: dbit 1
0001             31   HLbit: dbit 1
0002             32   abortFlag: dbit 1
0003             33   
0003             34   PlayerWin: dbit 1 ; flag to tell who won: 0 - playerOne, 1 - playerTwo
0004             35   
                570   $LIST
                 37   $LIST
02C2             39   
02C2             40   cseg
02C2             41   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
02C2             42   
02C2             43   TIMER0_RATE1   EQU 4000     ; 2000Hz squarewave (peak amplitude of CEM-1203 speaker) ; Pin 1.1
02C2             44   TIMER0_RELOAD1 EQU ((65536-(CLK/TIMER0_RATE1))) ; LOW TONE
02C2             45   TIMER0_RATE2   EQU 4200     ; 2100Hz squarewave (peak amplitude of CEM-1203 speaker) ; Pin 1.1
02C2             46   TIMER0_RELOAD2 EQU ((65536-(CLK/TIMER0_RATE2))) ; HIGH TONE
02C2             47   TIMER1_RATE1   EQU 500     ; 250Hz squarewave (peak amplitude of CEM-1203 speaker) ; Pin 1.1
02C2             48   TIMER1_RELOAD1 EQU ((65536-(CLK/TIMER1_RATE1))) ; LOW TONE
02C2             49   
02C2             50   
02C2             51   ; These 'equ' must match the hardware wiring
02C2             52   LCD_RS equ P3.2
02C2             53   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
02C2             54   LCD_E  equ P3.3
02C2             55   LCD_D4 equ P3.4
02C2             56   LCD_D5 equ P3.5
02C2             57   LCD_D6 equ P3.6
02C2             58   LCD_D7 equ P3.7
02C2             59   
02C2             60   SOUND_OUT equ P1.1
02C2             61   BOOT_BUTTON equ P4.5
02C2             62   
                 64   	$LIST
036E             66   
036E             67   ;                     1234567890123456    <- This helps determine the location of the counter
036E 50657269    68   Initial_Message:  db 'Period (ns):   ', 0
     6F642028
     6E73293A
     20202000
037E 4E6F2073    69   No_Signal_Str:    db 'No signal      ', 0
     69676E61
     6C202020
     20202000
038E 4E6F2073    70   No_Signal_Str1:  db 'No signal T1', 0
     69676E61
     6C205431
     00
039B             71   
039B             72   ; Sends 10-digit BCD number in bcd to the LCD
039B             73   Display_10_digit_BCD:
039B C000        74            push ar0
039D A83C        74            mov r0, bcd+4
039F 120358      74            lcall ?Display_BCD
03A2 D000        74            pop ar0
03A4 C000        75            push ar0
03A6 A83B        75            mov r0, bcd+3
03A8 120358      75            lcall ?Display_BCD
03AB D000        75            pop ar0
03AD C000        76            push ar0
03AF A83A        76            mov r0, bcd+2
03B1 120358      76            lcall ?Display_BCD
03B4 D000        76            pop ar0
03B6 C000        77            push ar0
03B8 A839        77            mov r0, bcd+1
03BA 120358      77            lcall ?Display_BCD
03BD D000        77            pop ar0
03BF C000        78            push ar0
03C1 A838        78            mov r0, bcd+0
03C3 120358      78            lcall ?Display_BCD
03C6 D000        78            pop ar0
03C8 22          79            ret
03C9             80            
03C9             81   ;---------------------------------;
03C9             82   ; Routine to initialize the ISR   ;
03C9             83   ; for timer 0                     ;
03C9             84   ;---------------------------------;
03C9             85   Timer0_Init:
03C9 E589        86            mov a, TMOD
03CB 54F0        87            anl a, #0xf0 ; Clear the bits for timer 0
03CD 4401        88            orl a, #0x01 ; Configure timer 0 as 16-timer
03CF F589        89            mov TMOD, a
03D1 758CEA      90            mov TH0, #high(TIMER0_RELOAD1)
03D4 758A67      91            mov TL0, #low(TIMER0_RELOAD1)
03D7             92            ; Set autoreload value
03D7 75F4EA      93            mov RH0, #high(TIMER0_RELOAD1)
03DA 75F267      94            mov RL0, #low(TIMER0_RELOAD1)
03DD             95            ; Enable the timer and interrupts
03DD D2A9        96       setb ET0  ; Enable timer 0 interrupt
03DF C28C        97       clr TR0  ; DONT start timer 0 yet
03E1 22          98            ret
03E2             99   
03E2            100   ;---------------------------------;
03E2            101   ; ISR for timer 0.
03E2            102   ;---------------------------------;
03E2            103   Timer0_ISR:
03E2            104            ;clr TF0  ; According to the data sheet this is done for us already.
03E2 B291       105            cpl SOUND_OUT ; Connect speaker to P1.1!
03E4 32         106            reti
03E5            107   
03E5            108   Timer1_ISR: 
03E5            109            ;clr TF1 ; According to data sheet this is done for us already.
03E5 C0E0       110            push acc
03E7 C0D0       111            push psw
03E9            112            
03E9 053D       113            inc Count1ms+0
03EB E53D       114            mov a, Count1ms+0
03ED 7002       115            jnz Inc_Done
03EF 053E       116            inc Count1ms+1
03F1            117   
03F1            118   Inc_Done:
03F1 E53D       119       mov a, Count1ms+0
03F3 B4E80C     120       cjne a, #low(1000), Timer1_ISR_done
03F6 E53E       121       mov a, Count1ms+1
03F8 B40307     122       cjne a, #high(1000), Timer1_ISR_done
03FB            123   
03FB D202       124            setb abortFlag
03FD E4         125            clr a 
03FE            126            
03FE F53D       127            mov Count1ms+0, a
0400 F53E       128            mov Count1ms+1, a
0402            129            
0402            130   Timer1_ISR_done:
0402            131       ;Set_cursor(2,7)
0402            132       ;Display_char(#'g')
0402 D0D0       133       pop psw
0404 D0E0       134       pop acc
0406            135       
0406 32         136            reti
0407            137   
0407            138   InitTimer1:
0407 E589       139            mov a, TMOD
0409 540F       140            anl a, #0x0f ; Clear the bits for timer 1
040B 4410       141            orl a, #0x10 ; Configure timer 1 as 16-timer
040D F589       142            mov TMOD, a
040F 758D53     143            mov TH1, #high(TIMER1_RELOAD1)
0412 758B34     144            mov TL1, #low(TIMER1_RELOAD1)
0415 E4         145            clr a
0416 F53D       146            mov Count1ms+0, a
0418 F53E       147            mov Count1ms+1, a
041A            148            ; Set autoreload value
041A 75F553     149            mov RH1, #high(TIMER1_RELOAD1)
041D 75F334     150            mov RL1, #low(TIMER1_RELOAD1)
0420 D2AB       151            setb ET1 ; set timer1 interrupt to 1
0422 C28E       152            clr TR1 ; don't start timer right away
0424 22         153            ret
0425            154   
0425            155   ;Initializes timer/counter 2 as a 16-bit timer
0425            156   InitTimer2:
0425 75C800     157            mov T2CON, #0 ; Stop timer/counter.  Set as timer (clock input is pin 22.1184MHz).
0428            158            ; Set the reload value on overflow to zero (just in case is not zero)
0428 75CB00     159            mov RCAP2H, #0
042B 75CA00     160            mov RCAP2L, #0
042E D2AD       161            setb ET2
0430 22         162       ret
0431            163       
0431            164   Init_Seed:
0431            165            ; Wait for a push of the BOOT button
0431            166            ; to initialize random seed:
0431 D2CA       167            setb TR2
0433 20C5FD     168            jb BOOT_BUTTON, $
0436 C0E0       169            push acc
0438 7401       169            mov a, #1
043A 14         169            dec a
043B 120351     169            lcall ?Set_Cursor_2 ; Select column and row
043E D0E0       169            pop acc
0440 C0E0       170            push acc
0442 7421       170            mov a, #'!'
0444 120312     170            lcall ?WriteData
0447 D0E0       170            pop acc
0449 85CD3F     171            mov Seed+0, TH2
044C 754001     172            mov Seed+1, #0x01
044F 754187     173       mov Seed+2, #0x87
0452 85CC42     174       mov Seed+3, TL2
0455 C2CA       175       clr TR2
0457 22         176       ret
0458            177       
0458            178   Random:
0458            179            ; Seed = 214013*Seed + 2531011
0458 853F30     180            mov x+0, Seed+0
045B 854031     181            mov x+1, Seed+1
045E 854132     182            mov x+2, Seed+2
0461 854233     183            mov x+3, Seed+3
0464 7534FD     184            mov y+0, #low (214013 % 0x10000) 
0467 753543     184            mov y+1, #high(214013 % 0x10000) 
046A 753603     184            mov y+2, #low (214013 / 0x10000) 
046D 753700     184            mov y+3, #high(214013 / 0x10000) 
0470 1201A6     185            lcall mul32
0473 7534C3     186            mov y+0, #low (2531011 % 0x10000) 
0476 75359E     186            mov y+1, #high(2531011 % 0x10000) 
0479 753626     186            mov y+2, #low (2531011 / 0x10000) 
047C 753700     186            mov y+3, #high(2531011 / 0x10000) 
047F 1200F1     187            lcall add32
0482 85303F     188            mov Seed+0, x+0
0485 853140     189            mov Seed+1, x+1
0488 853241     190            mov Seed+2, x+2
048B 853342     191            mov Seed+3, x+3
048E 22         192            ret
048F            193   
048F            194   Wait_Random:
048F C002       195            push AR2
0491 AA3F       195            mov R2, Seed+0
0493 1202CD     195            lcall ?Wait_Milli_Seconds
0496 D002       195            pop AR2
0498 C002       196            push AR2
049A AA40       196            mov R2, Seed+1
049C 1202CD     196            lcall ?Wait_Milli_Seconds
049F D002       196            pop AR2
04A1 C002       197            push AR2
04A3 AA41       197            mov R2, Seed+2
04A5 1202CD     197            lcall ?Wait_Milli_Seconds
04A8 D002       197            pop AR2
04AA C002       198            push AR2
04AC AA42       198            mov R2, Seed+3
04AE 1202CD     198            lcall ?Wait_Milli_Seconds
04B1 D002       198            pop AR2
04B3 22         199            ret
04B4            200   
04B4            201   ;---------------------------------;
04B4            202   ; Hardware initialization         ;
04B4            203   ;---------------------------------;
04B4            204   Initialize_All:
04B4 120425     205       lcall InitTimer2
04B7 1203C9     206       lcall Timer0_Init
04BA 120407     207       lcall InitTImer1
04BD 12031C     208       lcall LCD_4BIT ; Initialize LCD
04C0 D2AF       209       setb EA
04C2 120431     210       lcall Init_Seed
04C5            211            
04C5 22         212            ret
04C6            213   
04C6            214   ;---------------------------------;
04C6            215   ; Main program loop               ;
04C6            216   ;---------------------------------;
04C6            217   main:
04C6            218       ; Initialize the hardware:
04C6 75817F     219       mov SP, #7FH
04C9 1204B4     220       lcall Initialize_All
04CC D280       221       setb P0.0 ; Pin is used as input for 555 timer for timer/counter2
04CE D281       222       setb P0.1 ; Pin for 555 timer for timer/counter1
04D0 C201       223       clr HLbit 
04D2 C28C       224       clr TR0 ; clear timer 0 so no sound when game first starts
04D4 C202       225       clr abortFlag
04D6 754300     226       mov Score1, #0
04D9 754400     227       mov Score2, #0
04DC            228       
04DC C2A0       229       clr P2.0
04DE            230   
04DE C0E0       231            push acc
04E0 7401       231            mov a, #1
04E2 14         231            dec a
04E3 120353     231            lcall ?Set_Cursor_1 ; Select column and row
04E6 D0E0       231            pop acc
04E8            232       ;Send_Constant_String(#Initial_Message) 
04E8            233       
04E8            234   ; LETS SAY HIGHER TONE IS BADDDDDD
04E8            235   forever:
04E8            236   
04E8            237            ; First part of the game: decide which freq to buzz at
04E8 120458     238            lcall Random
04EB E540       239            mov a, Seed+1
04ED A2E3       240            mov c, acc.3
04EF 9201       241            mov HLbit, c
04F1 4009       242            jc setup_tone2 ; if carry is one, we play tone2
04F3            243            ; if carry is zero, we play tone1, the LOW tone
04F3 75F4EA     244            mov RH0, #high(TIMER0_RELOAD1)
04F6 75F267     245            mov RL0, #low(TIMER0_RELOAD1)
04F9 020502     246            ljmp play
04FC            247            
04FC            248            setup_tone2: ; get ready to play tone2, the HIGH tone
04FC 75F4EB     249                    mov RH0, #high(TIMER0_RELOAD2)
04FF 75F26E     250                    mov RL0, #low(TIMER0_RELOAD2)
0502            251            
0502            252            
0502            253            play: ; activates tone
0502 D28E       254                    setb TR1 ; start timer1 
0504 D28C       255                    setb TR0
0506            256            
0506 120548     257            lcall pin0period ; start check for capacitance (resulting in period) change
0509            258            
0509            259            ; When pin0_period returns, a player will have either won a point or lost a 
0509            260            ; point (unless already at zero). Now we need to update scoreboard and 
0509            261            ; if there is a winner, declare the winner
0509            262            
0509            263            ; to be done soon
0509 C002       264            push AR2
050B 7AFA       264            mov R2, #250
050D 1202CD     264            lcall ?Wait_Milli_Seconds
0510 D002       264            pop AR2
0512 C002       265            push AR2
0514 7AFA       265            mov R2, #250
0516 1202CD     265            lcall ?Wait_Milli_Seconds
0519 D002       265            pop AR2
051B C002       266            push AR2
051D 7AFA       266            mov R2, #250
051F 1202CD     266            lcall ?Wait_Milli_Seconds
0522 D002       266            pop AR2
0524 C002       267            push AR2
0526 7AFA       267            mov R2, #250
0528 1202CD     267            lcall ?Wait_Milli_Seconds
052B D002       267            pop AR2
052D            268            
052D            269            ; Wait a random time before playing the next sound
052D            270            ; Once a sound plays, it plays indefinitely till a slap occurs
052D            271            ; Once a slap occurs, calculate points, and wait to play the next sound
052D            272            ; To wait for a slap to occur, potentially use some sort of loop
052D            273            ;Wait_Milli_Seconds(#250)
052D            274            ;Wait_Milli_Seconds(#250)       
052D C28C       275            clr TR0
052F 12048F     276            lcall Wait_Random ; wait a random amount of time before playing the next tone
0532 0204E8     277            ljmp forever
0535            278            
0535            279   tooSlow:
0535 C28E       280            clr TR1
0537 C202       281            clr abortFlag
0539 C28C       282            clr TR0 ; stop the buzzer
053B            283            ;Wait_Milli_Seconds(#250)
053B            284            ;Wait_Milli_Seconds(#250)
053B C0E0       285            push acc
053D 740C       285            mov a, #12
053F 14         285            dec a
0540 120353     285            lcall ?Set_Cursor_1 ; Select column and row
0543 D0E0       285            pop acc
0545 0204E8     286            ljmp forever
0548            287   
0548            288   ; Determine period of 555 Timer for player 1
0548            289   pin0period: 
0548 2002EA     290            jb abortFlag, tooSlow
054B            291       ; synchronize with rising edge of the signal applied to pin P0.0
054B C2CA       292       clr TR2 ; Stop timer 2
054D 75CC00     293       mov TL2, #0
0550 75CD00     294       mov TH2, #0
0553 C2CF       295       clr TF2 ; clear timer2 overflow flag
0555 D2CA       296       setb TR2
0557            297   synch1:
0557 20CF79     298            jb TF2, no_signal_helper ; If the timer overflows, we assume there is no signal
055A 2080FA     299       jb P0.0, synch1
055D            300   synch2:    
055D 20CF73     301            jb TF2, no_signal_helper
0560 3080FA     302       jnb P0.0, synch2
0563            303       
0563            304       ; Measure the period of the signal applied to pin P0.0
0563 C2CA       305       clr TR2
0565 75CC00     306       mov TL2, #0
0568 75CD00     307       mov TH2, #0
056B C2CF       308       clr TF2
056D D2CA       309       setb TR2 ; Start timer 2
056F            310   measure1:
056F 20CF61     311            jb TF2, no_signal_helper
0572 2080FA     312       jb P0.0, measure1
0575            313   measure2:    
0575 20CF5B     314            jb TF2, no_signal_helper
0578 3080FA     315       jnb P0.0, measure2
057B C2CA       316       clr TR2 ; Stop timer 2, [TH2,TL2] * 45.21123ns is the period
057D 75349B     317            mov y+0, #low (45211 % 0x10000) 
0580 7535B0     317            mov y+1, #high(45211 % 0x10000) 
0583 753600     317            mov y+2, #low (45211 / 0x10000) 
0586 753700     317            mov y+3, #high(45211 / 0x10000) 
0589 85CC30     318       mov x+0, TL2
058C 85CD31     319       mov x+1, TH2
058F 753200     320       mov x+2, #0
0592 753300     321       mov x+3, #0
0595 1201A6     322       lcall mul32
0598 7534E8     323            mov y+0, #low (1000 % 0x10000) 
059B 753503     323            mov y+1, #high(1000 % 0x10000) 
059E 753600     323            mov y+2, #low (1000 / 0x10000) 
05A1 753700     323            mov y+3, #high(1000 / 0x10000) 
05A4 120233     324       lcall div32
05A7 C0E0       325            push acc
05A9 7404       325            mov a, #4
05AB 14         325            dec a
05AC 120353     325            lcall ?Set_Cursor_1 ; Select column and row
05AF D0E0       325            pop acc
05B1 12002C     326       lcall hex2bcd
05B4 12039B     327       lcall Display_10_digit_BCD
05B7            328       
05B7 753420     329            mov y+0, #low (500000 % 0x10000) 
05BA 7535A1     329            mov y+1, #high(500000 % 0x10000) 
05BD 753607     329            mov y+2, #low (500000 / 0x10000) 
05C0 753700     329            mov y+3, #high(500000 / 0x10000) 
05C3 120134     330       lcall x_lt_y
05C6 200030     331       jb mf, no_signal
05C9            332       
05C9 C28C       333       clr TR0 ; when a hit is detected, stop the buzzer
05CB            334       ; Handle winning a point
05CB 200108     335       jb HLbit, dec_score1
05CE            336       ;mov a, Score1
05CE            337       ;add a, #1
05CE            338       ;da a
05CE            339       ;mov Score1, a
05CE 0543       340       inc Score1
05D0 0205DC     341       ljmp pin0_return
05D3            342       
05D3            343   no_signal_helper:
05D3 0205F9     344            ljmp no_signal
05D6            345       
05D6            346   dec_score1:
05D6 E543       347            mov a, Score1
05D8 6002       348            jz pin0_return
05DA            349            ;add a, #99
05DA            350            ;da a
05DA            351            ;mov Score1, a
05DA 1543       352            dec Score1
05DC            353   
05DC            354   pin0_return:
05DC            355            ; Convert the result to BCD and display on LCD
05DC C0E0       356            push acc
05DE 7401       356            mov a, #1
05E0 14         356            dec a
05E1 120353     356            lcall ?Set_Cursor_1 ; Select column and row
05E4 D0E0       356            pop acc
05E6 854330     357            mov x, Score1
05E9 12060F     358            lcall zero_3x_bytes_0
05EC 12002C     359            lcall hex2bcd
05EF            360            ;lcall Display_10_digit_BCD
05EF C000       361            push ar0
05F1 A843       361            mov r0, Score1
05F3 120358     361            lcall ?Display_BCD
05F6 D000       361            pop ar0
05F8 22         362       ret 
05F9            363   
05F9            364   no_signal:       
05F9 C0E0       365            push acc
05FB 740F       365            mov a, #15
05FD 14         365            dec a
05FE 120351     365            lcall ?Set_Cursor_2 ; Select column and row
0601 D0E0       365            pop acc
0603 C0E0       366            push acc
0605 7421       366            mov a, #'!'
0607 120312     366            lcall ?WriteData
060A D0E0       366            pop acc
060C 020619     367       ljmp pin1period
060F            368   
060F            369   zero_3x_bytes_0:
060F 753100     370            mov x+1, #0
0612 753200     371            mov x+2, #0
0615 753300     372            mov x+3, #0
0618 22         373            ret
0619            374   
0619            375   ; Determine period for 555 timer for player 2
0619            376   pin1period:
0619 C002       377            push AR2
061B 7A64       377            mov R2, #100
061D 1202CD     377            lcall ?Wait_Milli_Seconds
0620 D002       377            pop AR2
0622            378            
0622            379       ; synchronize with rising edge of the signal applied to pin P0.0
0622 C2CA       380       clr TR2 ; Stop timer 2
0624 75CC00     381       mov TL2, #0
0627 75CD00     382       mov TH2, #0
062A C2CF       383       clr TF2 ; clear timer1 overflow flag
062C D2CA       384       setb TR2
062E            385   synch1_1:
062E 20CF18     386            jb TF2, no_signal_helper_again ; If the timer overflows, we assume there is no signal
0631 2081FA     387       jb P0.1, synch1_1
0634            388   synch2_1:    
0634 20CF12     389            jb TF2, no_signal_helper_again
0637 3081FA     390       jnb P0.1, synch2_1
063A            391       
063A            392       ; Measure the period of the signal applied to pin P0.0
063A C2CA       393       clr TR2
063C 75CC00     394       mov TL2, #0
063F 75CD00     395       mov TH2, #0
0642 C2CF       396       clr TF2
0644 D2CA       397       setb TR2 ; Start timer 2
0646 02064C     398            ljmp measure1_1
0649            399   no_signal_helper_again:
0649 0206C2     400            ljmp no_signal_1_helper
064C            401   measure1_1:
064C 20CF73     402            jb TF2, no_signal_1_helper
064F 2081FA     403       jb P0.1, measure1_1
0652            404   measure2_1:    
0652 20CF6D     405            jb TF2, no_signal_1_helper
0655 3081FA     406       jnb P0.1, measure2_1
0658 C2CA       407       clr TR2 ; Stop timer 2, [TH2,TL2] * 45.21123ns is the period
065A 75349B     408            mov y+0, #low (45211 % 0x10000) 
065D 7535B0     408            mov y+1, #high(45211 % 0x10000) 
0660 753600     408            mov y+2, #low (45211 / 0x10000) 
0663 753700     408            mov y+3, #high(45211 / 0x10000) 
0666 85CC30     409       mov x+0, TL2
0669 85CD31     410       mov x+1, TH2
066C C0E0       411            push acc
066E 7404       411            mov a, #4
0670 14         411            dec a
0671 120351     411            lcall ?Set_Cursor_2 ; Select column and row
0674 D0E0       411            pop acc
0676 753200     412       mov x+2, #0
0679 753300     413       mov x+3, #0
067C 1201A6     414       lcall mul32
067F 7534E8     415            mov y+0, #low (1000 % 0x10000) 
0682 753503     415            mov y+1, #high(1000 % 0x10000) 
0685 753600     415            mov y+2, #low (1000 / 0x10000) 
0688 753700     415            mov y+3, #high(1000 / 0x10000) 
068B 120233     416       lcall div32
068E            417       ; x has the period at this point
068E 753470     418            mov y+0, #low (6000 % 0x10000) 
0691 753517     418            mov y+1, #high(6000 % 0x10000) 
0694 753600     418            mov y+2, #low (6000 / 0x10000) 
0697 753700     418            mov y+3, #high(6000 / 0x10000) 
069A 120150     419       lcall x_gt_y
069D 200048     420       jb mf, no_signal_1
06A0 12002C     421       lcall hex2bcd
06A3 12039B     422       lcall Display_10_digit_BCD
06A6 7534A0     423            mov y+0, #low (4000 % 0x10000) 
06A9 75350F     423            mov y+1, #high(4000 % 0x10000) 
06AC 753600     423            mov y+2, #low (4000 / 0x10000) 
06AF 753700     423            mov y+3, #high(4000 / 0x10000) 
06B2 120134     424       lcall x_lt_y
06B5 200030     425       jb mf, no_signal_1
06B8            426       
06B8 C28C       427       clr TR0 ; when a hit is detected, stop the buzzer
06BA            428   ; Handle a press depending on tone
06BA 200108     429       jb HLbit, dec_score2
06BD            430       ;mov a, Score2
06BD            431       ;add a, #1
06BD            432       ;da a
06BD            433       ;mov Score1, a
06BD 0544       434       inc Score2
06BF 0206CB     435       ljmp pin1_return
06C2            436       
06C2            437   no_signal_1_helper:
06C2 0206E8     438            ljmp no_signal_1
06C5            439       
06C5            440   dec_score2:
06C5 E544       441            mov a, Score2
06C7 6002       442            jz pin1_return ; if already zero, go to end
06C9            443            ;add a, #99
06C9            444            ;da a
06C9            445            ;mov Score2, a
06C9 1544       446            dec Score2
06CB            447   
06CB            448   pin1_return:
06CB            449            ; Convert the result to BCD and display on LCD
06CB C0E0       450            push acc
06CD 7401       450            mov a, #1
06CF 14         450            dec a
06D0 120351     450            lcall ?Set_Cursor_2 ; Select column and row
06D3 D0E0       450            pop acc
06D5 854430     451            mov x, Score2
06D8 1206F5     452            lcall zero_3x_bytes_1
06DB 12002C     453            lcall hex2bcd
06DE            454            ;lcall Display_10_digit_BCD
06DE C000       455            push ar0
06E0 A844       455            mov r0, Score2
06E2 120358     455            lcall ?Display_BCD
06E5 D000       455            pop ar0
06E7 22         456       ret 
06E8            457       
06E8            458   no_signal_1:     
06E8 C0E0       459            push acc
06EA 740F       459            mov a, #15
06EC 14         459            dec a
06ED 120351     459            lcall ?Set_Cursor_2 ; Select column and row
06F0 D0E0       459            pop acc
06F2 020548     460       ljmp pin0period ; Repeat! 
06F5            461       
06F5            462   zero_3x_bytes_1:
06F5 753100     463            mov x+1, #0
06F8 753200     464            mov x+2, #0
06FB 753300     465            mov x+3, #0
06FE 22         466            ret
06FF            467   end
