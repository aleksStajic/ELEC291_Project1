                  2   $LIST
0000              4   
0000              5   org 0000H
0000 02080E       6      ljmp main
0003              7      
0003              8   ; Timer/Counter 0 overflow interrupt vector
000B              9   org 0x000B
000B 02042C      10            ljmp Timer0_ISR
000E             11   ; Timer/Counter 1 overflow interrupt vector
001B             12   org 0x001B
001B 02042F      13            ljmp Timer1_ISR   
001E             14   ; Timer/Counter 2 overflow interrupt vector
002B             15   org 0x002B
002B 32          16       reti
002C             17   
002C             18   ; These register definitions needed by 'math32.inc'
0030             19   DSEG at 30H
0030             20   x:   ds 4
0034             21   y:   ds 4
0038             22   bcd: ds 5
003D             23   Count1ms: ds 2
003F             24   
003F             25   Seed: ds 4
0043             26   Score1: ds 1
0044             27   Score2: ds 1
0045             28   
0000             29   BSEG
0000             30   mf: dbit 1
0001             31   HLbit: dbit 1
0002             32   abortFlag: dbit 1
0003             33   
0003             34   PlayerWin: dbit 1 ; flag to tell who won: 0 - playerOne, 1 - playerTwo
0004             35   
                570   $LIST
                 37   $LIST
02C2             39   
02C2             40   cseg
02C2             41   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
02C2             42   
02C2             43   TIMER0_RATE1   EQU 4000     ; 2000Hz squarewave (peak amplitude of CEM-1203 speaker) ; Pin 1.1
02C2             44   TIMER0_RELOAD1 EQU ((65536-(CLK/TIMER0_RATE1))) ; LOW TONE
02C2             45   TIMER0_RATE2   EQU 4200     ; 2100Hz squarewave (peak amplitude of CEM-1203 speaker) ; Pin 1.1
02C2             46   TIMER0_RELOAD2 EQU ((65536-(CLK/TIMER0_RATE2))) ; HIGH TONE
02C2             47   TIMER1_RATE1   EQU 500     ; 250Hz squarewave (peak amplitude of CEM-1203 speaker) ; Pin 1.1
02C2             48   TIMER1_RELOAD1 EQU ((65536-(CLK/TIMER1_RATE1))) ; LOW TONE
02C2             49   
02C2             50   ; TONE FREQUENCY
02C2             51   
02C2             52   A5_RATE                  EQU ((65536-(CLK/(2*A5_FREQUENCY))))
02C2             53   A5_FREQUENCY     EQU 440
02C2             54   A5b_RATE                 EQU ((65536-(CLK/(2*A5b_FREQUENCY))))
02C2             55   A5b_FREQUENCY    EQU 415
02C2             56   B5_RATE                  EQU ((65536-(CLK/(2*B5_FREQUENCY))))
02C2             57   B5_FREQUENCY     EQU 494
02C2             58   B5b_RATE                 EQU ((65536-(CLK/(2*B5b_FREQUENCY))))
02C2             59   B5b_FREQUENCY    EQU 466
02C2             60   C5_RATE                  EQU ((65536-(CLK/(2*C5_FREQUENCY))))
02C2             61   C5_FREQUENCY     EQU 523
02C2             62   D5_RATE                  EQU ((65536-(CLK/(2*D5_FREQUENCY))))
02C2             63   D5_FREQUENCY     EQU 622
02C2             64   E5_RATE                  EQU ((65536-(CLK/(2*E5_FREQUENCY))))
02C2             65   E5_FREQUENCY     EQU 660
02C2             66   
02C2             67   
02C2             68   
02C2             69   ; These 'equ' must match the hardware wiring
02C2             70   LCD_RS equ P3.2
02C2             71   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
02C2             72   LCD_E  equ P3.3
02C2             73   LCD_D4 equ P3.4
02C2             74   LCD_D5 equ P3.5
02C2             75   LCD_D6 equ P3.6
02C2             76   LCD_D7 equ P3.7
02C2             77   
02C2             78   SOUND_OUT equ P1.1
02C2             79   BOOT_BUTTON equ P4.5
02C2             80   RESET_BUTTON equ P0.4
02C2             81   
                 83   	$LIST
036E             85   
036E             86   ;                     1234567890123456    <- This helps determine the location of the counter
036E 50657269    87   Initial_Message:  db 'Period (ns):   ', 0
     6F642028
     6E73293A
     20202000
037E 4E6F2073    88   No_Signal_Str:    db 'No signal      ', 0
     69676E61
     6C202020
     20202000
038E 4E6F2073    89   No_Signal_Str1:  db 'No signal T1', 0
     69676E61
     6C205431
     00
039B 53636F72    90   Score1_Str:      db  'Score1: 00', 0
     65313A20
     303000
03A6 53636F72    91   Score2_Str:      db  'Score2: 00', 0
     65323A20
     303000
03B1 506C6179    92   Player_Wins:     db 'Player   Wins!  ', 0
     65722020
     2057696E
     73212020
     00
03C2 506C6179    93   Play_Again:     db 'Play again', 0
     20616761
     696E00
03CD 486F6C64    94   Menu_String1:    db 'Hold BOOT to', 0
     20424F4F
     5420746F
     00
03DA 53746172    95   Menu_String2:    db 'Start game', 0
     74206761
     6D6500
03E5             96   
03E5             97   ; Sends 10-digit BCD number in bcd to the LCD
03E5             98   Display_10_digit_BCD:
03E5 C000        99            push ar0
03E7 A83C        99            mov r0, bcd+4
03E9 120358      99            lcall ?Display_BCD
03EC D000        99            pop ar0
03EE C000       100            push ar0
03F0 A83B       100            mov r0, bcd+3
03F2 120358     100            lcall ?Display_BCD
03F5 D000       100            pop ar0
03F7 C000       101            push ar0
03F9 A83A       101            mov r0, bcd+2
03FB 120358     101            lcall ?Display_BCD
03FE D000       101            pop ar0
0400 C000       102            push ar0
0402 A839       102            mov r0, bcd+1
0404 120358     102            lcall ?Display_BCD
0407 D000       102            pop ar0
0409 C000       103            push ar0
040B A838       103            mov r0, bcd+0
040D 120358     103            lcall ?Display_BCD
0410 D000       103            pop ar0
0412 22         104            ret
0413            105            
0413            106   ;---------------------------------;
0413            107   ; Routine to initialize the ISR   ;
0413            108   ; for timer 0                     ;
0413            109   ;---------------------------------;
0413            110   Timer0_Init:
0413 E589       111            mov a, TMOD
0415 54F0       112            anl a, #0xf0 ; Clear the bits for timer 0
0417 4401       113            orl a, #0x01 ; Configure timer 0 as 16-timer
0419 F589       114            mov TMOD, a
041B 758CEA     115            mov TH0, #high(TIMER0_RELOAD1)
041E 758A67     116            mov TL0, #low(TIMER0_RELOAD1)
0421            117            ; Set autoreload value
0421 75F4EA     118            mov RH0, #high(TIMER0_RELOAD1)
0424 75F267     119            mov RL0, #low(TIMER0_RELOAD1)
0427            120            ; Enable the timer and interrupts
0427 D2A9       121       setb ET0  ; Enable timer 0 interrupt
0429 C28C       122       clr TR0  ; DONT start timer 0 yet
042B 22         123            ret
042C            124   
042C            125   ;---------------------------------;
042C            126   ; ISR for timer 0.
042C            127   ;---------------------------------;
042C            128   Timer0_ISR:
042C            129            ;clr TF0  ; According to the data sheet this is done for us already.
042C B291       130            cpl SOUND_OUT ; Connect speaker to P1.1!
042E 32         131            reti
042F            132   
042F            133   Timer1_ISR: 
042F            134            ;clr TF1 ; According to data sheet this is done for us already.
042F C0E0       135            push acc
0431 C0D0       136            push psw
0433            137            
0433 053D       138            inc Count1ms+0
0435 E53D       139            mov a, Count1ms+0
0437 7002       140            jnz Inc_Done
0439 053E       141            inc Count1ms+1
043B            142   
043B            143   Inc_Done:
043B E53D       144       mov a, Count1ms+0
043D B4E80C     145       cjne a, #low(1000), Timer1_ISR_done
0440 E53E       146       mov a, Count1ms+1
0442 B40307     147       cjne a, #high(1000), Timer1_ISR_done
0445            148   
0445 D202       149            setb abortFlag
0447 E4         150            clr a 
0448            151            
0448 F53D       152            mov Count1ms+0, a
044A F53E       153            mov Count1ms+1, a
044C            154            
044C            155   Timer1_ISR_done:
044C            156       ;Set_cursor(2,7)
044C            157       ;Display_char(#'g')
044C D0D0       158       pop psw
044E D0E0       159       pop acc
0450            160       
0450 32         161            reti
0451            162   
0451            163   InitTimer1:
0451 E589       164            mov a, TMOD
0453 540F       165            anl a, #0x0f ; Clear the bits for timer 1
0455 4410       166            orl a, #0x10 ; Configure timer 1 as 16-timer
0457 F589       167            mov TMOD, a
0459 758D53     168            mov TH1, #high(TIMER1_RELOAD1)
045C 758B34     169            mov TL1, #low(TIMER1_RELOAD1)
045F E4         170            clr a
0460 F53D       171            mov Count1ms+0, a
0462 F53E       172            mov Count1ms+1, a
0464            173            ; Set autoreload value
0464 75F553     174            mov RH1, #high(TIMER1_RELOAD1)
0467 75F334     175            mov RL1, #low(TIMER1_RELOAD1)
046A D2AB       176            setb ET1 ; set timer1 interrupt to 1
046C C28E       177            clr TR1 ; don't start timer right away
046E 22         178            ret
046F            179   
046F            180   ;Initializes timer/counter 2 as a 16-bit timer
046F            181   InitTimer2:
046F 75C800     182            mov T2CON, #0 ; Stop timer/counter.  Set as timer (clock input is pin 22.1184MHz).
0472            183            ; Set the reload value on overflow to zero (just in case is not zero)
0472 75CB00     184            mov RCAP2H, #0
0475 75CA00     185            mov RCAP2L, #0
0478 D2AD       186            setb ET2
047A 22         187       ret
047B            188       
047B            189   Init_Seed3:
047B            190            ; Wait for a push of the BOOT button
047B            191            ; to initialize random seed:
047B D2CA       192            setb TR2
047D            193            ;jb BOOT_BUTTON, $
047D            194   
047D C0E0       195            push acc
047F 7401       195            mov a, #1
0481 14         195            dec a
0482 120351     195            lcall ?Set_Cursor_2 ; Select column and row
0485 D0E0       195            pop acc
0487 C0E0       196            push acc
0489 7421       196            mov a, #'!'
048B 120312     196            lcall ?WriteData
048E D0E0       196            pop acc
0490 85CD3F     197            mov Seed+0, TH2
0493 754001     198            mov Seed+1, #0x01
0496 754187     199       mov Seed+2, #0x87
0499 85CC42     200       mov Seed+3, TL2
049C C2CA       201       clr TR2
049E 02084F     202       ljmp main2
04A1            203       
04A1            204   Random:
04A1            205            ; Seed = 214013*Seed + 2531011
04A1 853F30     206            mov x+0, Seed+0
04A4 854031     207            mov x+1, Seed+1
04A7 854132     208            mov x+2, Seed+2
04AA 854233     209            mov x+3, Seed+3
04AD 7534FD     210            mov y+0, #low (214013 % 0x10000) 
04B0 753543     210            mov y+1, #high(214013 % 0x10000) 
04B3 753603     210            mov y+2, #low (214013 / 0x10000) 
04B6 753700     210            mov y+3, #high(214013 / 0x10000) 
04B9 1201A6     211            lcall mul32
04BC 7534C3     212            mov y+0, #low (2531011 % 0x10000) 
04BF 75359E     212            mov y+1, #high(2531011 % 0x10000) 
04C2 753626     212            mov y+2, #low (2531011 / 0x10000) 
04C5 753700     212            mov y+3, #high(2531011 / 0x10000) 
04C8 1200F1     213            lcall add32
04CB 85303F     214            mov Seed+0, x+0
04CE 853140     215            mov Seed+1, x+1
04D1 853241     216            mov Seed+2, x+2
04D4 853342     217            mov Seed+3, x+3
04D7 22         218            ret
04D8            219            
04D8            220   Play_A5_2:
04D8 C28C       221            clr TR0
04DA 758C9D     222            mov TH0, #high(A5_RATE)
04DD 758AD2     223            mov TL0, #low(A5_RATE)
04E0            224            ; Set autoreload value
04E0 75F49D     225            mov RH0, #high(A5_RATE)
04E3 75F2D2     226            mov RL0, #low(A5_RATE)
04E6 D28C       227            setb TR0
04E8 22         228            ret
04E9            229            
04E9            230   Play_A5b:
04E9 C28C       231            clr TR0
04EB 758C97     232            mov TH0, #high(A5b_RATE)
04EE 758AE8     233            mov TL0, #low(A5b_RATE)
04F1            234            ; Set autoreload value
04F1 75F497     235            mov RH0, #high(A5b_RATE)
04F4 75F2E8     236            mov RL0, #low(A5b_RATE)
04F7 D28C       237            setb TR0
04F9 22         238            ret
04FA            239            
04FA            240   Play_B5:
04FA C28C       241            clr TR0
04FC 758CA8     242            mov TH0, #high(B5_RATE)
04FF 758A8D     243            mov TL0, #low(B5_RATE)
0502            244            ; Set autoreload value
0502 75F4A8     245            mov RH0, #high(B5_RATE)
0505 75F28D     246            mov RL0, #low(B5_RATE)
0508 D28C       247            setb TR0
050A 22         248            ret
050B            249            
050B            250   Play_B5b:
050B C28C       251            clr TR0
050D 758CA3     252            mov TH0, #high(B5b_RATE)
0510 758A4C     253            mov TL0, #low(B5b_RATE)
0513            254            ; Set autoreload value
0513 75F4A3     255            mov RH0, #high(B5b_RATE)
0516 75F24C     256            mov RL0, #low(B5b_RATE)
0519 D28C       257            setb TR0
051B 22         258            ret
051C            259            
051C            260   Play_C5:
051C C28C       261            clr TR0
051E 758CAD     262            mov TH0, #high(C5_RATE)
0521 758A67     263            mov TL0, #low(C5_RATE)
0524            264            ; Set autoreload value
0524 75F4AD     265            mov RH0, #high(C5_RATE)
0527 75F267     266            mov RL0, #low(C5_RATE)
052A D28C       267            setb TR0
052C 22         268            ret
052D            269                    
052D            270   Play_D5:
052D C28C       271            clr TR0
052F 758CBA     272            mov TH0, #high(D5_RATE)
0532 758A8C     273            mov TL0, #low(D5_RATE)
0535            274            ; Set autoreload value
0535 75F4BA     275            mov RH0, #high(D5_RATE)
0538 75F28C     276            mov RL0, #low(D5_RATE)
053B D28C       277            setb TR0
053D 22         278            ret
053E            279            
053E            280   Play_E5:
053E C28C       281            clr TR0
0540 758CBE     282            mov TH0, #high(E5_RATE)
0543 758A8C     283            mov TL0, #low(E5_RATE)
0546            284            ; Set autoreload value
0546 75F4BE     285            mov RH0, #high(E5_RATE)
0549 75F28C     286            mov RL0, #low(E5_RATE)
054C D28C       287            setb TR0
054E 22         288            ret
054F            289   
054F            290   Wait_Random:
054F C002       291            push AR2
0551 AA3F       291            mov R2, Seed+0
0553 1202CD     291            lcall ?Wait_Milli_Seconds
0556 D002       291            pop AR2
0558 C002       292            push AR2
055A AA40       292            mov R2, Seed+1
055C 1202CD     292            lcall ?Wait_Milli_Seconds
055F D002       292            pop AR2
0561 C002       293            push AR2
0563 AA41       293            mov R2, Seed+2
0565 1202CD     293            lcall ?Wait_Milli_Seconds
0568 D002       293            pop AR2
056A C002       294            push AR2
056C AA42       294            mov R2, Seed+3
056E 1202CD     294            lcall ?Wait_Milli_Seconds
0571 D002       294            pop AR2
0573 22         295            ret
0574            296            
0574            297   Play_A5:
0574 0204D8     298            ljmp Play_A5_2
0577            299            
0577            300   Init_Seed2:
0577 02047B     301            ljmp Init_Seed3
057A            302            
057A            303   Tetris:
057A 12053E     304            lcall Play_E5
057D C002       305            push AR2
057F 7AFA       305            mov R2, #250
0581 1202CD     305            lcall ?Wait_Milli_Seconds
0584 D002       305            pop AR2
0586 C002       306            push AR2
0588 7A53       306            mov R2, #83
058A 1202CD     306            lcall ?Wait_Milli_Seconds
058D D002       306            pop AR2
058F 30C5E5     307            jnb BOOT_BUTTON, Init_Seed2
0592 1204FA     308            lcall Play_B5
0595 C002       309            push AR2
0597 7AA8       309            mov R2, #168
0599 1202CD     309            lcall ?Wait_Milli_Seconds
059C D002       309            pop AR2
059E 12051C     310            lcall Play_C5
05A1 C002       311            push AR2
05A3 7AA8       311            mov R2, #168
05A5 1202CD     311            lcall ?Wait_Milli_Seconds
05A8 D002       311            pop AR2
05AA 12052D     312            lcall Play_D5
05AD C002       313            push AR2
05AF 7AA8       313            mov R2, #168
05B1 1202CD     313            lcall ?Wait_Milli_Seconds
05B4 D002       313            pop AR2
05B6 30C5BE     314            jnb BOOT_BUTTON, Init_Seed2
05B9 12053E     315            lcall Play_E5
05BC C002       316            push AR2
05BE 7A54       316            mov R2, #84
05C0 1202CD     316            lcall ?Wait_Milli_Seconds
05C3 D002       316            pop AR2
05C5 12052D     317            lcall Play_D5
05C8 C002       318            push AR2
05CA 7A54       318            mov R2, #84
05CC 1202CD     318            lcall ?Wait_Milli_Seconds
05CF D002       318            pop AR2
05D1 12051C     319            lcall Play_C5
05D4 C002       320            push AR2
05D6 7AA4       320            mov R2, #164
05D8 1202CD     320            lcall ?Wait_Milli_Seconds
05DB D002       320            pop AR2
05DD 1204FA     321            lcall Play_B5
05E0 C002       322            push AR2
05E2 7AA4       322            mov R2, #164
05E4 1202CD     322            lcall ?Wait_Milli_Seconds
05E7 D002       322            pop AR2
05E9 30C58B     323            jnb BOOT_BUTTON, Init_Seed2
05EC 120574     324            lcall Play_A5
05EF C002       325            push AR2
05F1 7AFA       325            mov R2, #250
05F3 1202CD     325            lcall ?Wait_Milli_Seconds
05F6 D002       325            pop AR2
05F8 C002       326            push AR2
05FA 7A53       326            mov R2, #83
05FC 1202CD     326            lcall ?Wait_Milli_Seconds
05FF D002       326            pop AR2
0601 1207F1     327            lcall WaitNote
0604 120574     328            lcall Play_A5
0607 C002       329            push AR2
0609 7AA8       329            mov R2, #168
060B 1202CD     329            lcall ?Wait_Milli_Seconds
060E D002       329            pop AR2
0610 12051C     330            lcall Play_C5
0613 C002       331            push AR2
0615 7AA8       331            mov R2, #168
0617 1202CD     331            lcall ?Wait_Milli_Seconds
061A D002       331            pop AR2
061C 12053E     332            lcall Play_E5
061F C002       333            push AR2
0621 7AFA       333            mov R2, #250
0623 1202CD     333            lcall ?Wait_Milli_Seconds
0626 D002       333            pop AR2
0628 30C536     334            jnb BOOT_BUTTON, Init_Seed4
062B C002       335            push AR2
062D 7A53       335            mov R2, #83
062F 1202CD     335            lcall ?Wait_Milli_Seconds
0632 D002       335            pop AR2
0634 12052D     336            lcall Play_D5
0637 C002       337            push AR2
0639 7AA8       337            mov R2, #168
063B 1202CD     337            lcall ?Wait_Milli_Seconds
063E D002       337            pop AR2
0640 1207F1     338            lcall WaitNote
0643 12051C     339            lcall Play_C5
0646 C002       340            push AR2
0648 7AA8       340            mov R2, #168
064A 1202CD     340            lcall ?Wait_Milli_Seconds
064D D002       340            pop AR2
064F 1207F1     341            lcall WaitNote
0652 1204FA     342            lcall Play_B5
0655 C002       343            push AR2
0657 7AFA       343            mov R2, #250
0659 1202CD     343            lcall ?Wait_Milli_Seconds
065C D002       343            pop AR2
065E 020664     344            ljmp nextttt
0661            345            
0661            346   Init_Seed4:
0661 0206B5     347            ljmp Init_Seed
0664            348            
0664            349   nextttt:
0664 C002       350            push AR2
0666 7A53       350            mov R2, #83
0668 1202CD     350            lcall ?Wait_Milli_Seconds
066B D002       350            pop AR2
066D 30C545     351            jnb BOOT_BUTTON, Init_Seed
0670 1204FA     352            lcall Play_B5
0673 C002       353            push AR2
0675 7A54       353            mov R2, #84
0677 1202CD     353            lcall ?Wait_Milli_Seconds
067A D002       353            pop AR2
067C 1207F1     354            lcall WaitNote
067F 1204FA     355            lcall Play_B5
0682 C002       356            push AR2
0684 7A54       356            mov R2, #84
0686 1202CD     356            lcall ?Wait_Milli_Seconds
0689 D002       356            pop AR2
068B 12051C     357            lcall Play_C5
068E C002       358            push AR2
0690 7AA8       358            mov R2, #168
0692 1202CD     358            lcall ?Wait_Milli_Seconds
0695 D002       358            pop AR2
0697 12052D     359            lcall Play_D5
069A C002       360            push AR2
069C 7AFA       360            mov R2, #250
069E 1202CD     360            lcall ?Wait_Milli_Seconds
06A1 D002       360            pop AR2
06A3 30C50F     361            jnb BOOT_BUTTON, Init_Seed
06A6 C002       362            push AR2
06A8 7A53       362            mov R2, #83
06AA 1202CD     362            lcall ?Wait_Milli_Seconds
06AD D002       362            pop AR2
06AF 12053E     363            lcall Play_E5
06B2 0206B8     364            ljmp nextt
06B5            365            
06B5            366   Init_Seed:
06B5 020577     367            ljmp Init_Seed2
06B8            368            
06B8            369   nextt:
06B8 C002       370            push AR2
06BA 7AFA       370            mov R2, #250
06BC 1202CD     370            lcall ?Wait_Milli_Seconds
06BF D002       370            pop AR2
06C1 C002       371            push AR2
06C3 7A53       371            mov R2, #83
06C5 1202CD     371            lcall ?Wait_Milli_Seconds
06C8 D002       371            pop AR2
06CA 30C5E8     372            jnb BOOT_BUTTON, Init_Seed
06CD 12051C     373            lcall Play_C5
06D0 C002       374            push AR2
06D2 7AFA       374            mov R2, #250
06D4 1202CD     374            lcall ?Wait_Milli_Seconds
06D7 D002       374            pop AR2
06D9 C002       375            push AR2
06DB 7A53       375            mov R2, #83
06DD 1202CD     375            lcall ?Wait_Milli_Seconds
06E0 D002       375            pop AR2
06E2 30C5D0     376            jnb BOOT_BUTTON, Init_Seed
06E5 120574     377            lcall Play_A5
06E8 C002       378            push AR2
06EA 7AFA       378            mov R2, #250
06EC 1202CD     378            lcall ?Wait_Milli_Seconds
06EF D002       378            pop AR2
06F1 C002       379            push AR2
06F3 7A53       379            mov R2, #83
06F5 1202CD     379            lcall ?Wait_Milli_Seconds
06F8 D002       379            pop AR2
06FA 1207F1     380            lcall WaitNote
06FD 30C5B5     381            jnb BOOT_BUTTON, Init_Seed
0700 120574     382            lcall Play_A5
0703 C002       383            push AR2
0705 7AFA       383            mov R2, #250
0707 1202CD     383            lcall ?Wait_Milli_Seconds
070A D002       383            pop AR2
070C C002       384            push AR2
070E 7AFA       384            mov R2, #250
0710 1202CD     384            lcall ?Wait_Milli_Seconds
0713 D002       384            pop AR2
0715 30C59D     385            jnb BOOT_BUTTON, Init_Seed
0718 C002       386            push AR2
071A 7AA7       386            mov R2, #167
071C 1202CD     386            lcall ?Wait_Milli_Seconds
071F D002       386            pop AR2
0721            387            
0721 12057A     388            lcall Tetris
0724            389            
0724            390   FF7:
0724 12051C     391            lcall Play_C5
0727 C002       392            push AR2
0729 7A8C       392            mov R2, #140
072B 1202CD     392            lcall ?Wait_Milli_Seconds
072E D002       392            pop AR2
0730            393   
0730 1207F1     394            lcall WaitNote
0733 12051C     395            lcall Play_C5
0736 C002       396            push AR2
0738 7A8C       396            mov R2, #140
073A 1202CD     396            lcall ?Wait_Milli_Seconds
073D D002       396            pop AR2
073F            397   
073F 1207F1     398            lcall WaitNote
0742 12051C     399            lcall Play_C5
0745 C002       400            push AR2
0747 7A8C       400            mov R2, #140
0749 1202CD     400            lcall ?Wait_Milli_Seconds
074C D002       400            pop AR2
074E 1207F1     401            lcall WaitNote
0751 12051C     402            lcall Play_C5
0754 C002       403            push AR2
0756 7AFA       403            mov R2, #250
0758 1202CD     403            lcall ?Wait_Milli_Seconds
075B D002       403            pop AR2
075D C002       404            push AR2
075F 7A96       404            mov R2, #150
0761 1202CD     404            lcall ?Wait_Milli_Seconds
0764 D002       404            pop AR2
0766 1207F1     405            lcall WaitNote
0769 1204E9     406            lcall Play_A5b
076C C002       407            push AR2
076E 7AFA       407            mov R2, #250
0770 1202CD     407            lcall ?Wait_Milli_Seconds
0773 D002       407            pop AR2
0775 C002       408            push AR2
0777 7A96       408            mov R2, #150
0779 1202CD     408            lcall ?Wait_Milli_Seconds
077C D002       408            pop AR2
077E 1207F1     409            lcall WaitNote
0781 12050B     410            lcall Play_B5b
0784 C002       411            push AR2
0786 7AFA       411            mov R2, #250
0788 1202CD     411            lcall ?Wait_Milli_Seconds
078B D002       411            pop AR2
078D C002       412            push AR2
078F 7A96       412            mov R2, #150
0791 1202CD     412            lcall ?Wait_Milli_Seconds
0794 D002       412            pop AR2
0796 1207F1     413            lcall WaitNote
0799 12051C     414            lcall Play_C5
079C C002       415            push AR2
079E 7AFA       415            mov R2, #250
07A0 1202CD     415            lcall ?Wait_Milli_Seconds
07A3 D002       415            pop AR2
07A5 1207F1     416            lcall WaitNote
07A8 12050B     417            lcall Play_B5b
07AB C002       418            push AR2
07AD 7A8C       418            mov R2, #140
07AF 1202CD     418            lcall ?Wait_Milli_Seconds
07B2 D002       418            pop AR2
07B4 1207F1     419            lcall WaitNote
07B7 12051C     420            lcall Play_C5
07BA C002       421            push AR2
07BC 7AFA       421            mov R2, #250
07BE 1202CD     421            lcall ?Wait_Milli_Seconds
07C1 D002       421            pop AR2
07C3 C002       422            push AR2
07C5 7AFA       422            mov R2, #250
07C7 1202CD     422            lcall ?Wait_Milli_Seconds
07CA D002       422            pop AR2
07CC C002       423            push AR2
07CE 7AFA       423            mov R2, #250
07D0 1202CD     423            lcall ?Wait_Milli_Seconds
07D3 D002       423            pop AR2
07D5 C002       424            push AR2
07D7 7AFA       424            mov R2, #250
07D9 1202CD     424            lcall ?Wait_Milli_Seconds
07DC D002       424            pop AR2
07DE C002       425            push AR2
07E0 7AFA       425            mov R2, #250
07E2 1202CD     425            lcall ?Wait_Milli_Seconds
07E5 D002       425            pop AR2
07E7 C002       426            push AR2
07E9 7AFA       426            mov R2, #250
07EB 1202CD     426            lcall ?Wait_Milli_Seconds
07EE D002       426            pop AR2
07F0            427   
07F0 22         428            ret
07F1            429   
07F1            430   WaitNote:
07F1 C28C       431            clr TR0
07F3 C002       432            push AR2
07F5 7A08       432            mov R2, #8
07F7 1202CD     432            lcall ?Wait_Milli_Seconds
07FA D002       432            pop AR2
07FC D28C       433            setb TR0
07FE 22         434   ret
07FF            435            
07FF            436   ;---------------------------------;
07FF            437   ; Hardware initialization         ;
07FF            438   ;---------------------------------;
07FF            439   Initialize_All:
07FF 12046F     440       lcall InitTimer2
0802 120413     441       lcall Timer0_Init
0805 120451     442       lcall InitTImer1
0808 12031C     443       lcall LCD_4BIT ; Initialize LCD
080B D2AF       444       setb EA
080D            445       ;lcall Tetris
080D            446       ;lcall Init_Seed
080D            447            
080D 22         448            ret
080E            449   
080E            450   ;---------------------------------;
080E            451   ; Main program loop               ;
080E            452   ;---------------------------------;
080E            453   main:
080E            454       ; Initialize the hardware:
080E 75817F     455       mov SP, #7FH
0811 1207FF     456       lcall Initialize_All
0814 C0E0       457            push acc
0816 7401       457            mov a, #1
0818 14         457            dec a
0819 120353     457            lcall ?Set_Cursor_1 ; Select column and row
081C D0E0       457            pop acc
081E C083       458            push dph
0820 C082       458            push dpl
0822 C0E0       458            push acc
0824 9003CD     458            mov dptr, #Menu_String1
0827 120346     458            lcall ?Send_Constant_String
082A D0E0       458            pop acc
082C D082       458            pop dpl
082E D083       458            pop dph
0830 C0E0       459            push acc
0832 7401       459            mov a, #1
0834 14         459            dec a
0835 120351     459            lcall ?Set_Cursor_2 ; Select column and row
0838 D0E0       459            pop acc
083A C083       460            push dph
083C C082       460            push dpl
083E C0E0       460            push acc
0840 9003DA     460            mov dptr, #Menu_String2
0843 120346     460            lcall ?Send_Constant_String
0846 D0E0       460            pop acc
0848 D082       460            pop dpl
084A D083       460            pop dph
084C            461       ;lcall FF7
084C 02057A     462       ljmp Tetris
084F            463   main2:
084F 7401       464            mov a, #0x01
0851 120317     464            lcall ?WriteCommand
0854 C002       465            push AR2
0856 7A05       465            mov R2, #5
0858 1202CD     465            lcall ?Wait_Milli_Seconds
085B D002       465            pop AR2
085D D280       466       setb P0.0 ; Pin is used as input for 555 timer for timer/counter2
085F D281       467       setb P0.1 ; Pin for 555 timer for timer/counter1
0861 C201       468       clr HLbit 
0863 C28C       469       clr TR0 ; clear timer 0 so no sound when game first starts
0865 C202       470       clr abortFlag
0867 754300     471       mov Score1, #0
086A 754400     472       mov Score2, #0
086D C0E0       473            push acc
086F 7401       473            mov a, #1
0871 14         473            dec a
0872 120353     473            lcall ?Set_Cursor_1 ; Select column and row
0875 D0E0       473            pop acc
0877 C083       474            push dph
0879 C082       474            push dpl
087B C0E0       474            push acc
087D 90039B     474            mov dptr, #Score1_Str
0880 120346     474            lcall ?Send_Constant_String
0883 D0E0       474            pop acc
0885 D082       474            pop dpl
0887 D083       474            pop dph
0889 C0E0       475            push acc
088B 7401       475            mov a, #1
088D 14         475            dec a
088E 120351     475            lcall ?Set_Cursor_2 ; Select column and row
0891 D0E0       475            pop acc
0893 C083       476            push dph
0895 C082       476            push dpl
0897 C0E0       476            push acc
0899 9003A6     476            mov dptr, #Score2_Str
089C 120346     476            lcall ?Send_Constant_String
089F D0E0       476            pop acc
08A1 D082       476            pop dpl
08A3 D083       476            pop dph
08A5            477       
08A5            478       
08A5 C2A0       479       clr P2.0
08A7            480   
08A7 C0E0       481            push acc
08A9 7401       481            mov a, #1
08AB 14         481            dec a
08AC 120353     481            lcall ?Set_Cursor_1 ; Select column and row
08AF D0E0       481            pop acc
08B1            482       ;Send_Constant_String(#Initial_Message) 
08B1            483       
08B1            484   ; LETS SAY HIGHER TONE IS BADDDDDD
08B1            485   forever:
08B1            486   
08B1            487            ; First part of the game: decide which freq to buzz at
08B1            488            
08B1 1204A1     489            lcall Random
08B4 E540       490            mov a, Seed+1
08B6 A2E3       491            mov c, acc.3
08B8 9201       492            mov HLbit, c
08BA 4009       493            jc setup_tone2 ; if carry is one, we play tone2
08BC            494            ; if carry is zero, we play tone1, the LOW tone
08BC 75F4EA     495            mov RH0, #high(TIMER0_RELOAD1)
08BF 75F267     496            mov RL0, #low(TIMER0_RELOAD1)
08C2 0208CB     497            ljmp play
08C5            498            
08C5            499            setup_tone2: ; get ready to play tone2, the HIGH tone
08C5 75F4EB     500                    mov RH0, #high(TIMER0_RELOAD2)
08C8 75F26E     501                    mov RL0, #low(TIMER0_RELOAD2)
08CB            502            
08CB            503            
08CB            504            play: ; activates tone
08CB D28E       505                    setb TR1 ; start timer1 
08CD D28C       506                    setb TR0
08CF            507            
08CF 120A14     508            lcall pin0period ; start check for capacitance (resulting in period) change
08D2 854330     509            mov x+0 , Score1
08D5 753100     510            mov x+1 , #0
08D8 753200     511            mov x+2 , #0
08DB 753300     512            mov x+3 , #0
08DE 753405     513            mov y+0, #low (5 % 0x10000) 
08E1 753500     513            mov y+1, #high(5 % 0x10000) 
08E4 753600     513            mov y+2, #low (5 / 0x10000) 
08E7 753700     513            mov y+3, #high(5 / 0x10000) 
08EA 12016C     514            lcall x_eq_y
08ED 200015     515            jb mf, Win_Routine1
08F0 854430     516       mov x+0 , Score2
08F3 753100     517            mov x+1 , #0
08F6 753200     518            mov x+2 , #0
08F9 753300     519            mov x+3 , #0
08FC 12016C     520            lcall x_eq_y
08FF 200064     521            jb mf, Win_Routine2
0902 0209C7     522   ljmp No_Win
0905            523            
0905            524            
0905            525   Win_Routine1:
0905 7401       526            mov a, #0x01
0907 120317     526            lcall ?WriteCommand
090A C002       527            push AR2
090C 7A02       527            mov R2, #2
090E 1202CD     527            lcall ?Wait_Milli_Seconds
0911 D002       527            pop AR2
0913 C0E0       528            push acc
0915 7401       528            mov a, #1
0917 14         528            dec a
0918 120353     528            lcall ?Set_Cursor_1 ; Select column and row
091B D0E0       528            pop acc
091D C083       529            push dph
091F C082       529            push dpl
0921 C0E0       529            push acc
0923 9003B1     529            mov dptr, #Player_Wins
0926 120346     529            lcall ?Send_Constant_String
0929 D0E0       529            pop acc
092B D082       529            pop dpl
092D D083       529            pop dph
092F C0E0       530            push acc
0931 7407       530            mov a, #7
0933 14         530            dec a
0934 120353     530            lcall ?Set_Cursor_1 ; Select column and row
0937 D0E0       530            pop acc
0939            530   
0939 C0E0       531            push acc
093B 7431       531            mov a, #'1'
093D 120312     531            lcall ?WriteData
0940 D0E0       531            pop acc
0942 C0E0       532            push acc
0944 7401       532            mov a, #1
0946 14         532            dec a
0947 120351     532            lcall ?Set_Cursor_2 ; Select column and row
094A D0E0       532            pop acc
094C C083       533            push dph
094E C082       533            push dpl
0950 C0E0       533            push acc
0952 9003C2     533            mov dptr, #Play_Again
0955 120346     533            lcall ?Send_Constant_String
0958 D0E0       533            pop acc
095A D082       533            pop dpl
095C D083       533            pop dph
095E 120724     534            lcall FF7
0961 C28C       535            clr TR0
0963 0209F3     536            ljmp Reset
0966            537            
0966            538   Win_Routine2:
0966 7401       539            mov a, #0x01
0968 120317     539            lcall ?WriteCommand
096B C002       540            push AR2
096D 7A02       540            mov R2, #2
096F 1202CD     540            lcall ?Wait_Milli_Seconds
0972 D002       540            pop AR2
0974 C0E0       541            push acc
0976 7401       541            mov a, #1
0978 14         541            dec a
0979 120353     541            lcall ?Set_Cursor_1 ; Select column and row
097C D0E0       541            pop acc
097E C083       542            push dph
0980 C082       542            push dpl
0982 C0E0       542            push acc
0984 9003B1     542            mov dptr, #Player_Wins
0987 120346     542            lcall ?Send_Constant_String
098A D0E0       542            pop acc
098C D082       542            pop dpl
098E D083       542            pop dph
0990 C0E0       543            push acc
0992 7407       543            mov a, #7
0994 14         543            dec a
0995 120353     543            lcall ?Set_Cursor_1 ; Select column and row
0998 D0E0       543            pop acc
099A            543   
099A C0E0       544            push acc
099C 7432       544            mov a, #'2'
099E 120312     544            lcall ?WriteData
09A1 D0E0       544            pop acc
09A3 C0E0       545            push acc
09A5 7401       545            mov a, #1
09A7 14         545            dec a
09A8 120351     545            lcall ?Set_Cursor_2 ; Select column and row
09AB D0E0       545            pop acc
09AD C083       546            push dph
09AF C082       546            push dpl
09B1 C0E0       546            push acc
09B3 9003C2     546            mov dptr, #Play_Again
09B6 120346     546            lcall ?Send_Constant_String
09B9 D0E0       546            pop acc
09BB D082       546            pop dpl
09BD D083       546            pop dph
09BF 120724     547            lcall FF7
09C2 C28C       548            clr TR0
09C4 0209F3     549            ljmp Reset      
09C7            550            
09C7            551            ; When pin0_period returns, a player will have either won a point or lost a 
09C7            552            ; point (unless already at zero). Now we need to update scoreboard and 
09C7            553            ; if there is a winner, declare the winner
09C7            554   No_Win:
09C7            555            ; to be done soon
09C7 C002       556            push AR2
09C9 7AFA       556            mov R2, #250
09CB 1202CD     556            lcall ?Wait_Milli_Seconds
09CE D002       556            pop AR2
09D0 C002       557            push AR2
09D2 7AFA       557            mov R2, #250
09D4 1202CD     557            lcall ?Wait_Milli_Seconds
09D7 D002       557            pop AR2
09D9 C002       558            push AR2
09DB 7AFA       558            mov R2, #250
09DD 1202CD     558            lcall ?Wait_Milli_Seconds
09E0 D002       558            pop AR2
09E2 C002       559            push AR2
09E4 7AFA       559            mov R2, #250
09E6 1202CD     559            lcall ?Wait_Milli_Seconds
09E9 D002       559            pop AR2
09EB            560            
09EB            561            ; Wait a random time before playing the next sound
09EB            562            ; Once a sound plays, it plays indefinitely till a slap occurs
09EB            563            ; Once a slap occurs, calculate points, and wait to play the next sound
09EB            564            ; To wait for a slap to occur, potentially use some sort of loop
09EB            565            ;Wait_Milli_Seconds(#250)
09EB            566            ;Wait_Milli_Seconds(#250)       
09EB C28C       567            clr TR0
09ED 12054F     568            lcall Wait_Random ; wait a random amount of time before playing the next tone
09F0 0208B1     569            ljmp forever
09F3            570   
09F3            571   Reset:
09F3 3084FD     572            jnb RESET_BUTTON, Reset
09F6 02084F     573            ljmp main2
09F9            574            
09F9            575   tooSlow:
09F9 C28E       576            clr TR1
09FB C202       577            clr abortFlag
09FD C28C       578            clr TR0 ; stop the buzzer
09FF C002       579            push AR2
0A01 7AFA       579            mov R2, #250
0A03 1202CD     579            lcall ?Wait_Milli_Seconds
0A06 D002       579            pop AR2
0A08 C002       580            push AR2
0A0A 7AFA       580            mov R2, #250
0A0C 1202CD     580            lcall ?Wait_Milli_Seconds
0A0F D002       580            pop AR2
0A11 0208B1     581            ljmp forever
0A14            582   
0A14            583   ; Determine period of 555 Timer for player 1
0A14            584   pin0period: 
0A14 2002E2     585            jb abortFlag, tooSlow
0A17            586       ; synchronize with rising edge of the signal applied to pin P0.0
0A17 C2CA       587       clr TR2 ; Stop timer 2
0A19 75CC00     588       mov TL2, #0
0A1C 75CD00     589       mov TH2, #0
0A1F C2CF       590       clr TF2 ; clear timer2 overflow flag
0A21 D2CA       591       setb TR2
0A23            592   synch1:
0A23 20CF41     593            jb TF2, no_signal0_helper_again ; If the timer overflows, we assume there is no signal
0A26 2080FA     594       jb P0.0, synch1
0A29            595   synch2:    
0A29 20CF3B     596            jb TF2, no_signal0_helper_again
0A2C 3080FA     597       jnb P0.0, synch2
0A2F            598       
0A2F            599       ; Measure the period of the signal applied to pin P0.0
0A2F C2CA       600       clr TR2
0A31 75CC00     601       mov TL2, #0
0A34 75CD00     602       mov TH2, #0
0A37 C2CF       603       clr TF2
0A39 D2CA       604       setb TR2 ; Start timer 2
0A3B            605   measure1:
0A3B 20CF6C     606            jb TF2, no_signal_helper
0A3E 2080FA     607       jb P0.0, measure1
0A41            608   measure2:    
0A41 20CF66     609            jb TF2, no_signal_helper
0A44 3080FA     610       jnb P0.0, measure2
0A47 C2CA       611       clr TR2 ; Stop timer 2, [TH2,TL2] * 45.21123ns is the period
0A49 75349B     612            mov y+0, #low (45211 % 0x10000) 
0A4C 7535B0     612            mov y+1, #high(45211 % 0x10000) 
0A4F 753600     612            mov y+2, #low (45211 / 0x10000) 
0A52 753700     612            mov y+3, #high(45211 / 0x10000) 
0A55 85CC30     613       mov x+0, TL2
0A58 85CD31     614       mov x+1, TH2
0A5B 753200     615       mov x+2, #0
0A5E 753300     616       mov x+3, #0
0A61 1201A6     617       lcall mul32
0A64 020A6A     618            ljmp next
0A67            619   no_signal0_helper_again:
0A67 020AAA     620            ljmp no_signal_helper
0A6A            621       next:
0A6A 7534E8     622            mov y+0, #low (1000 % 0x10000) 
0A6D 753503     622            mov y+1, #high(1000 % 0x10000) 
0A70 753600     622            mov y+2, #low (1000 / 0x10000) 
0A73 753700     622            mov y+3, #high(1000 / 0x10000) 
0A76 120233     623       lcall div32
0A79            624        ; x has the period at this point
0A79 12002C     625       lcall hex2bcd
0A7C            626       ;Set_cursor(2,1)
0A7C            627       ;lcall Display_10_digit_BCD
0A7C 7534D8     628            mov y+0, #low (407000 % 0x10000) 
0A7F 753535     628            mov y+1, #high(407000 % 0x10000) 
0A82 753606     628            mov y+2, #low (407000 / 0x10000) 
0A85 753700     628            mov y+3, #high(407000 / 0x10000) 
0A88 120150     629       lcall x_gt_y
0A8B 20004F     630       jb mf, pin1period
0A8E 753410     631            mov y+0, #low (394000 % 0x10000) 
0A91 753503     631            mov y+1, #high(394000 % 0x10000) 
0A94 753606     631            mov y+2, #low (394000 / 0x10000) 
0A97 753700     631            mov y+3, #high(394000 / 0x10000) 
0A9A 120134     632       lcall x_lt_y
0A9D 200030     633       jb mf, no_signal
0AA0 C28C       634       clr TR0 ; when a hit is detected, stop the buzzer
0AA2            635       ; Handle winning a point
0AA2 200108     636       jb HLbit, dec_score1
0AA5            637       ;mov a, Score1
0AA5            638       ;add a, #1
0AA5            639       ;da a
0AA5            640       ;mov Score1, a
0AA5 0543       641       inc Score1
0AA7 020AB3     642       ljmp pin0_return
0AAA            643       
0AAA            644   no_signal_helper:
0AAA 020AD0     645            ljmp no_signal
0AAD            646       
0AAD            647   dec_score1:
0AAD E543       648            mov a, Score1
0AAF 6002       649            jz pin0_return
0AB1            650            ;add a, #99
0AB1            651            ;da a
0AB1            652            ;mov Score1, a
0AB1 1543       653            dec Score1
0AB3            654   
0AB3            655   pin0_return:
0AB3            656            ; Convert the result to BCD and display on LCD
0AB3 C0E0       657            push acc
0AB5 7409       657            mov a, #9
0AB7 14         657            dec a
0AB8 120353     657            lcall ?Set_Cursor_1 ; Select column and row
0ABB D0E0       657            pop acc
0ABD 854330     658            mov x, Score1
0AC0 120AD3     659            lcall zero_3x_bytes_0
0AC3 12002C     660            lcall hex2bcd
0AC6            661            ;lcall Display_10_digit_BCD
0AC6 C000       662            push ar0
0AC8 A843       662            mov r0, Score1
0ACA 120358     662            lcall ?Display_BCD
0ACD D000       662            pop ar0
0ACF 22         663       ret 
0AD0            664   
0AD0            665   no_signal:       
0AD0 020ADD     666       ljmp pin1period
0AD3            667   
0AD3            668   zero_3x_bytes_0:
0AD3 753100     669            mov x+1, #0
0AD6 753200     670            mov x+2, #0
0AD9 753300     671            mov x+3, #0
0ADC 22         672            ret
0ADD            673   
0ADD            674   ; Determine period for 555 timer for player 2
0ADD            675   pin1period:
0ADD C002       676            push AR2
0ADF 7A64       676            mov R2, #100
0AE1 1202CD     676            lcall ?Wait_Milli_Seconds
0AE4 D002       676            pop AR2
0AE6            677            
0AE6            678       ; synchronize with rising edge of the signal applied to pin P0.0
0AE6 C2CA       679       clr TR2 ; Stop timer 2
0AE8 75CC00     680       mov TL2, #0
0AEB 75CD00     681       mov TH2, #0
0AEE C2CF       682       clr TF2 ; clear timer1 overflow flag
0AF0 D2CA       683       setb TR2
0AF2            684   synch1_1:
0AF2 20CF18     685            jb TF2, no_signal_helper_again ; If the timer overflows, we assume there is no signal
0AF5 2081FA     686       jb P0.1, synch1_1
0AF8            687   synch2_1:    
0AF8 20CF12     688            jb TF2, no_signal_helper_again
0AFB 3081FA     689       jnb P0.1, synch2_1
0AFE            690       
0AFE            691       ; Measure the period of the signal applied to pin P0.0
0AFE C2CA       692       clr TR2
0B00 75CC00     693       mov TL2, #0
0B03 75CD00     694       mov TH2, #0
0B06 C2CF       695       clr TF2
0B08 D2CA       696       setb TR2 ; Start timer 2
0B0A 020B10     697            ljmp measure1_1
0B0D            698   no_signal_helper_again:
0B0D 020B76     699            ljmp no_signal_1_helper
0B10            700   measure1_1:
0B10 20CF63     701            jb TF2, no_signal_1_helper
0B13 2081FA     702       jb P0.1, measure1_1
0B16            703   measure2_1:    
0B16            704   
0B16 20CF5D     705            jb TF2, no_signal_1_helper
0B19 3081FA     706       jnb P0.1, measure2_1
0B1C C2CA       707       clr TR2 ; Stop timer 2, [TH2,TL2] * 45.21123ns is the period
0B1E 75349B     708            mov y+0, #low (45211 % 0x10000) 
0B21 7535B0     708            mov y+1, #high(45211 % 0x10000) 
0B24 753600     708            mov y+2, #low (45211 / 0x10000) 
0B27 753700     708            mov y+3, #high(45211 / 0x10000) 
0B2A 85CC30     709       mov x+0, TL2
0B2D 85CD31     710       mov x+1, TH2
0B30            711       ;Set_cursor(2,4)
0B30 753200     712       mov x+2, #0
0B33 753300     713       mov x+3, #0
0B36 1201A6     714       lcall mul32
0B39 7534E8     715            mov y+0, #low (1000 % 0x10000) 
0B3C 753503     715            mov y+1, #high(1000 % 0x10000) 
0B3F 753600     715            mov y+2, #low (1000 / 0x10000) 
0B42 753700     715            mov y+3, #high(1000 / 0x10000) 
0B45 120233     716       lcall div32
0B48            717       ; x has the period at this point
0B48            718       ;Set_cursor(1,1)
0B48            719       ;lcall hex2bcd
0B48            720       ;lcall Display_10_digit_BCD
0B48 7534C0     721            mov y+0, #low (440000 % 0x10000) 
0B4B 7535B6     721            mov y+1, #high(440000 % 0x10000) 
0B4E 753606     721            mov y+2, #low (440000 / 0x10000) 
0B51 753700     721            mov y+3, #high(440000 / 0x10000) 
0B54 120150     722       lcall x_gt_y
0B57 200042     723       jb mf, no_signal_1
0B5A            724       ;lcall hex2bcd
0B5A            725       ;lcall Display_10_digit_BCD
0B5A 753420     726            mov y+0, #low (404000 % 0x10000) 
0B5D 75352A     726            mov y+1, #high(404000 % 0x10000) 
0B60 753606     726            mov y+2, #low (404000 / 0x10000) 
0B63 753700     726            mov y+3, #high(404000 / 0x10000) 
0B66 120134     727       lcall x_lt_y
0B69 200030     728       jb mf, no_signal_1
0B6C            729       
0B6C C28C       730       clr TR0 ; when a hit is detected, stop the buzzer
0B6E            731   ; Handle a press depending on tone
0B6E 200108     732       jb HLbit, dec_score2
0B71            733       ;mov a, Score2
0B71            734       ;add a, #1
0B71            735       ;da a
0B71            736       ;mov Score1, a
0B71 0544       737       inc Score2
0B73 020B7F     738       ljmp pin1_return
0B76            739       
0B76            740   no_signal_1_helper:
0B76 020B9C     741            ljmp no_signal_1
0B79            742       
0B79            743   dec_score2:
0B79 E544       744            mov a, Score2
0B7B 6002       745            jz pin1_return ; if already zero, go to end
0B7D            746            ;add a, #99
0B7D            747            ;da a
0B7D            748            ;mov Score2, a
0B7D 1544       749            dec Score2
0B7F            750   
0B7F            751   pin1_return:
0B7F            752            ; Convert the result to BCD and display on LCD
0B7F C0E0       753            push acc
0B81 7409       753            mov a, #9
0B83 14         753            dec a
0B84 120351     753            lcall ?Set_Cursor_2 ; Select column and row
0B87 D0E0       753            pop acc
0B89 854430     754            mov x, Score2
0B8C 120B9F     755            lcall zero_3x_bytes_1
0B8F 12002C     756            lcall hex2bcd
0B92            757            ;lcall Display_10_digit_BCD
0B92 C000       758            push ar0
0B94 A844       758            mov r0, Score2
0B96 120358     758            lcall ?Display_BCD
0B99 D000       758            pop ar0
0B9B 22         759       ret 
0B9C            760       
0B9C            761   no_signal_1:     
0B9C 020A14     762       ljmp pin0period ; Repeat! 
0B9F            763       
0B9F            764   zero_3x_bytes_1:
0B9F 753100     765            mov x+1, #0
0BA2 753200     766            mov x+2, #0
0BA5 753300     767            mov x+3, #0
0BA8 22         768            ret
0BA9            769   end
