                  2   $LIST
0000              4   
0000              5   org 0000H
0000 0204F8       6      ljmp main
0003              7      
0003              8   ; Timer/Counter 0 overflow interrupt vector
000B              9   org 0x000B
000B 020414      10            ljmp Timer0_ISR
000E             11   ; Timer/Counter 1 overflow interrupt vector
001B             12   org 0x001B
001B 020417      13            ljmp Timer1_ISR   
001E             14   ; Timer/Counter 2 overflow interrupt vector
002B             15   org 0x002B
002B 32          16       reti
002C             17   
002C             18   ; These register definitions needed by 'math32.inc'
0030             19   DSEG at 30H
0030             20   x:   ds 4
0034             21   y:   ds 4
0038             22   bcd: ds 5
003D             23   Count1ms: ds 2
003F             24   
003F             25   Seed: ds 4
0043             26   Score1: ds 1
0044             27   Score2: ds 1
0045             28   
0000             29   BSEG
0000             30   mf: dbit 1
0001             31   HLbit: dbit 1
0002             32   abortFlag: dbit 1
0003             33   
0003             34   PlayerWin: dbit 1 ; flag to tell who won: 0 - playerOne, 1 - playerTwo
0004             35   
                570   $LIST
                 37   $LIST
02C2             39   
02C2             40   cseg
02C2             41   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
02C2             42   
02C2             43   TIMER0_RATE1   EQU 4000     ; 2000Hz squarewave (peak amplitude of CEM-1203 speaker) ; Pin 1.1
02C2             44   TIMER0_RELOAD1 EQU ((65536-(CLK/TIMER0_RATE1))) ; LOW TONE
02C2             45   TIMER0_RATE2   EQU 4200     ; 2100Hz squarewave (peak amplitude of CEM-1203 speaker) ; Pin 1.1
02C2             46   TIMER0_RELOAD2 EQU ((65536-(CLK/TIMER0_RATE2))) ; HIGH TONE
02C2             47   TIMER1_RATE1   EQU 500     ; 250Hz squarewave (peak amplitude of CEM-1203 speaker) ; Pin 1.1
02C2             48   TIMER1_RELOAD1 EQU ((65536-(CLK/TIMER1_RATE1))) ; LOW TONE
02C2             49   
02C2             50   
02C2             51   ; These 'equ' must match the hardware wiring
02C2             52   LCD_RS equ P3.2
02C2             53   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
02C2             54   LCD_E  equ P3.3
02C2             55   LCD_D4 equ P3.4
02C2             56   LCD_D5 equ P3.5
02C2             57   LCD_D6 equ P3.6
02C2             58   LCD_D7 equ P3.7
02C2             59   
02C2             60   SOUND_OUT equ P1.1
02C2             61   BOOT_BUTTON equ P4.5
02C2             62   RESET_BUTTON equ P0.4
02C2             63   
                 65   	$LIST
036E             67   
036E             68   ;                     1234567890123456    <- This helps determine the location of the counter
036E 50657269    69   Initial_Message:  db 'Period (ns):   ', 0
     6F642028
     6E73293A
     20202000
037E 4E6F2073    70   No_Signal_Str:    db 'No signal      ', 0
     69676E61
     6C202020
     20202000
038E 4E6F2073    71   No_Signal_Str1:  db 'No signal T1', 0
     69676E61
     6C205431
     00
039B 53636F72    72   Score1_Str:      db  'Score1: 00', 0
     65313A20
     303000
03A6 53636F72    73   Score2_Str:      db  'Score2: 00', 0
     65323A20
     303000
03B1 506C6179    74   Player_Wins:     db 'Player   Wins!  ', 0
     65722020
     2057696E
     73212020
     00
03C2 506C6179    75   Play_Again:     db 'Play again', 0
     20616761
     696E00
03CD             76   
03CD             77   ; Sends 10-digit BCD number in bcd to the LCD
03CD             78   Display_10_digit_BCD:
03CD C000        79            push ar0
03CF A83C        79            mov r0, bcd+4
03D1 120358      79            lcall ?Display_BCD
03D4 D000        79            pop ar0
03D6 C000        80            push ar0
03D8 A83B        80            mov r0, bcd+3
03DA 120358      80            lcall ?Display_BCD
03DD D000        80            pop ar0
03DF C000        81            push ar0
03E1 A83A        81            mov r0, bcd+2
03E3 120358      81            lcall ?Display_BCD
03E6 D000        81            pop ar0
03E8 C000        82            push ar0
03EA A839        82            mov r0, bcd+1
03EC 120358      82            lcall ?Display_BCD
03EF D000        82            pop ar0
03F1 C000        83            push ar0
03F3 A838        83            mov r0, bcd+0
03F5 120358      83            lcall ?Display_BCD
03F8 D000        83            pop ar0
03FA 22          84            ret
03FB             85            
03FB             86   ;---------------------------------;
03FB             87   ; Routine to initialize the ISR   ;
03FB             88   ; for timer 0                     ;
03FB             89   ;---------------------------------;
03FB             90   Timer0_Init:
03FB E589        91            mov a, TMOD
03FD 54F0        92            anl a, #0xf0 ; Clear the bits for timer 0
03FF 4401        93            orl a, #0x01 ; Configure timer 0 as 16-timer
0401 F589        94            mov TMOD, a
0403 758CEA      95            mov TH0, #high(TIMER0_RELOAD1)
0406 758A67      96            mov TL0, #low(TIMER0_RELOAD1)
0409             97            ; Set autoreload value
0409 75F4EA      98            mov RH0, #high(TIMER0_RELOAD1)
040C 75F267      99            mov RL0, #low(TIMER0_RELOAD1)
040F            100            ; Enable the timer and interrupts
040F D2A9       101       setb ET0  ; Enable timer 0 interrupt
0411 C28C       102       clr TR0  ; DONT start timer 0 yet
0413 22         103            ret
0414            104   
0414            105   ;---------------------------------;
0414            106   ; ISR for timer 0.
0414            107   ;---------------------------------;
0414            108   Timer0_ISR:
0414            109            ;clr TF0  ; According to the data sheet this is done for us already.
0414 B291       110            cpl SOUND_OUT ; Connect speaker to P1.1!
0416 32         111            reti
0417            112   
0417            113   Timer1_ISR: 
0417            114            ;clr TF1 ; According to data sheet this is done for us already.
0417 C0E0       115            push acc
0419 C0D0       116            push psw
041B            117            
041B 053D       118            inc Count1ms+0
041D E53D       119            mov a, Count1ms+0
041F 7002       120            jnz Inc_Done
0421 053E       121            inc Count1ms+1
0423            122   
0423            123   Inc_Done:
0423 E53D       124       mov a, Count1ms+0
0425 B4E80C     125       cjne a, #low(1000), Timer1_ISR_done
0428 E53E       126       mov a, Count1ms+1
042A B40307     127       cjne a, #high(1000), Timer1_ISR_done
042D            128   
042D D202       129            setb abortFlag
042F E4         130            clr a 
0430            131            
0430 F53D       132            mov Count1ms+0, a
0432 F53E       133            mov Count1ms+1, a
0434            134            
0434            135   Timer1_ISR_done:
0434            136       ;Set_cursor(2,7)
0434            137       ;Display_char(#'g')
0434 D0D0       138       pop psw
0436 D0E0       139       pop acc
0438            140       
0438 32         141            reti
0439            142   
0439            143   InitTimer1:
0439 E589       144            mov a, TMOD
043B 540F       145            anl a, #0x0f ; Clear the bits for timer 1
043D 4410       146            orl a, #0x10 ; Configure timer 1 as 16-timer
043F F589       147            mov TMOD, a
0441 758D53     148            mov TH1, #high(TIMER1_RELOAD1)
0444 758B34     149            mov TL1, #low(TIMER1_RELOAD1)
0447 E4         150            clr a
0448 F53D       151            mov Count1ms+0, a
044A F53E       152            mov Count1ms+1, a
044C            153            ; Set autoreload value
044C 75F553     154            mov RH1, #high(TIMER1_RELOAD1)
044F 75F334     155            mov RL1, #low(TIMER1_RELOAD1)
0452 D2AB       156            setb ET1 ; set timer1 interrupt to 1
0454 C28E       157            clr TR1 ; don't start timer right away
0456 22         158            ret
0457            159   
0457            160   ;Initializes timer/counter 2 as a 16-bit timer
0457            161   InitTimer2:
0457 75C800     162            mov T2CON, #0 ; Stop timer/counter.  Set as timer (clock input is pin 22.1184MHz).
045A            163            ; Set the reload value on overflow to zero (just in case is not zero)
045A 75CB00     164            mov RCAP2H, #0
045D 75CA00     165            mov RCAP2L, #0
0460 D2AD       166            setb ET2
0462 22         167       ret
0463            168       
0463            169   Init_Seed:
0463            170            ; Wait for a push of the BOOT button
0463            171            ; to initialize random seed:
0463 D2CA       172            setb TR2
0465 20C5FD     173            jb BOOT_BUTTON, $
0468 C0E0       174            push acc
046A 7401       174            mov a, #1
046C 14         174            dec a
046D 120351     174            lcall ?Set_Cursor_2 ; Select column and row
0470 D0E0       174            pop acc
0472 C0E0       175            push acc
0474 7421       175            mov a, #'!'
0476 120312     175            lcall ?WriteData
0479 D0E0       175            pop acc
047B 85CD3F     176            mov Seed+0, TH2
047E 754001     177            mov Seed+1, #0x01
0481 754187     178       mov Seed+2, #0x87
0484 85CC42     179       mov Seed+3, TL2
0487 C2CA       180       clr TR2
0489 22         181       ret
048A            182       
048A            183   Random:
048A            184            ; Seed = 214013*Seed + 2531011
048A 853F30     185            mov x+0, Seed+0
048D 854031     186            mov x+1, Seed+1
0490 854132     187            mov x+2, Seed+2
0493 854233     188            mov x+3, Seed+3
0496 7534FD     189            mov y+0, #low (214013 % 0x10000) 
0499 753543     189            mov y+1, #high(214013 % 0x10000) 
049C 753603     189            mov y+2, #low (214013 / 0x10000) 
049F 753700     189            mov y+3, #high(214013 / 0x10000) 
04A2 1201A6     190            lcall mul32
04A5 7534C3     191            mov y+0, #low (2531011 % 0x10000) 
04A8 75359E     191            mov y+1, #high(2531011 % 0x10000) 
04AB 753626     191            mov y+2, #low (2531011 / 0x10000) 
04AE 753700     191            mov y+3, #high(2531011 / 0x10000) 
04B1 1200F1     192            lcall add32
04B4 85303F     193            mov Seed+0, x+0
04B7 853140     194            mov Seed+1, x+1
04BA 853241     195            mov Seed+2, x+2
04BD 853342     196            mov Seed+3, x+3
04C0 22         197            ret
04C1            198   
04C1            199   Wait_Random:
04C1 C002       200            push AR2
04C3 AA3F       200            mov R2, Seed+0
04C5 1202CD     200            lcall ?Wait_Milli_Seconds
04C8 D002       200            pop AR2
04CA C002       201            push AR2
04CC AA40       201            mov R2, Seed+1
04CE 1202CD     201            lcall ?Wait_Milli_Seconds
04D1 D002       201            pop AR2
04D3 C002       202            push AR2
04D5 AA41       202            mov R2, Seed+2
04D7 1202CD     202            lcall ?Wait_Milli_Seconds
04DA D002       202            pop AR2
04DC C002       203            push AR2
04DE AA42       203            mov R2, Seed+3
04E0 1202CD     203            lcall ?Wait_Milli_Seconds
04E3 D002       203            pop AR2
04E5 22         204            ret
04E6            205   
04E6            206   ;---------------------------------;
04E6            207   ; Hardware initialization         ;
04E6            208   ;---------------------------------;
04E6            209   Initialize_All:
04E6 120457     210       lcall InitTimer2
04E9 1203FB     211       lcall Timer0_Init
04EC 120439     212       lcall InitTImer1
04EF 12031C     213       lcall LCD_4BIT ; Initialize LCD
04F2 D2AF       214       setb EA
04F4 120463     215       lcall Init_Seed
04F7            216            
04F7 22         217            ret
04F8            218   
04F8            219   ;---------------------------------;
04F8            220   ; Main program loop               ;
04F8            221   ;---------------------------------;
04F8            222   main:
04F8            223       ; Initialize the hardware:
04F8 75817F     224       mov SP, #7FH
04FB 1204E6     225       lcall Initialize_All
04FE            226       main2:
04FE 7401       227            mov a, #0x01
0500 120317     227            lcall ?WriteCommand
0503 C002       228            push AR2
0505 7A05       228            mov R2, #5
0507 1202CD     228            lcall ?Wait_Milli_Seconds
050A D002       228            pop AR2
050C D280       229       setb P0.0 ; Pin is used as input for 555 timer for timer/counter2
050E D281       230       setb P0.1 ; Pin for 555 timer for timer/counter1
0510 C201       231       clr HLbit 
0512 C28C       232       clr TR0 ; clear timer 0 so no sound when game first starts
0514 C202       233       clr abortFlag
0516 754300     234       mov Score1, #0
0519 754400     235       mov Score2, #0
051C C0E0       236            push acc
051E 7401       236            mov a, #1
0520 14         236            dec a
0521 120353     236            lcall ?Set_Cursor_1 ; Select column and row
0524 D0E0       236            pop acc
0526 C083       237            push dph
0528 C082       237            push dpl
052A C0E0       237            push acc
052C 90039B     237            mov dptr, #Score1_Str
052F 120346     237            lcall ?Send_Constant_String
0532 D0E0       237            pop acc
0534 D082       237            pop dpl
0536 D083       237            pop dph
0538 C0E0       238            push acc
053A 7401       238            mov a, #1
053C 14         238            dec a
053D 120351     238            lcall ?Set_Cursor_2 ; Select column and row
0540 D0E0       238            pop acc
0542 C083       239            push dph
0544 C082       239            push dpl
0546 C0E0       239            push acc
0548 9003A6     239            mov dptr, #Score2_Str
054B 120346     239            lcall ?Send_Constant_String
054E D0E0       239            pop acc
0550 D082       239            pop dpl
0552 D083       239            pop dph
0554            240       
0554            241       
0554 C2A0       242       clr P2.0
0556            243   
0556 C0E0       244            push acc
0558 7401       244            mov a, #1
055A 14         244            dec a
055B 120353     244            lcall ?Set_Cursor_1 ; Select column and row
055E D0E0       244            pop acc
0560            245       ;Send_Constant_String(#Initial_Message) 
0560            246       
0560            247   ; LETS SAY HIGHER TONE IS BADDDDDD
0560            248   forever:
0560            249   
0560            250            ; First part of the game: decide which freq to buzz at
0560            251            
0560 12048A     252            lcall Random
0563 E540       253            mov a, Seed+1
0565 A2E3       254            mov c, acc.3
0567 9201       255            mov HLbit, c
0569 4009       256            jc setup_tone2 ; if carry is one, we play tone2
056B            257            ; if carry is zero, we play tone1, the LOW tone
056B 75F4EA     258            mov RH0, #high(TIMER0_RELOAD1)
056E 75F267     259            mov RL0, #low(TIMER0_RELOAD1)
0571 02057A     260            ljmp play
0574            261            
0574            262            setup_tone2: ; get ready to play tone2, the HIGH tone
0574 75F4EB     263                    mov RH0, #high(TIMER0_RELOAD2)
0577 75F26E     264                    mov RL0, #low(TIMER0_RELOAD2)
057A            265            
057A            266            
057A            267            play: ; activates tone
057A D28E       268                    setb TR1 ; start timer1 
057C D28C       269                    setb TR0
057E            270            
057E 1206B9     271            lcall pin0period ; start check for capacitance (resulting in period) change
0581 854330     272            mov x+0 , Score1
0584 753100     273            mov x+1 , #0
0587 753200     274            mov x+2 , #0
058A 753300     275            mov x+3 , #0
058D 753405     276            mov y+0, #low (5 % 0x10000) 
0590 753500     276            mov y+1, #high(5 % 0x10000) 
0593 753600     276            mov y+2, #low (5 / 0x10000) 
0596 753700     276            mov y+3, #high(5 / 0x10000) 
0599 12016C     277            lcall x_eq_y
059C 200015     278            jb mf, Win_Routine1
059F 854430     279       mov x+0 , Score2
05A2 753100     280            mov x+1 , #0
05A5 753200     281            mov x+2 , #0
05A8 753300     282            mov x+3 , #0
05AB 12016C     283            lcall x_eq_y
05AE 20005F     284            jb mf, Win_Routine2
05B1 02066C     285   ljmp No_Win
05B4            286            
05B4            287            
05B4            288   Win_Routine1:
05B4 7401       289            mov a, #0x01
05B6 120317     289            lcall ?WriteCommand
05B9 C002       290            push AR2
05BB 7A02       290            mov R2, #2
05BD 1202CD     290            lcall ?Wait_Milli_Seconds
05C0 D002       290            pop AR2
05C2 C0E0       291            push acc
05C4 7401       291            mov a, #1
05C6 14         291            dec a
05C7 120353     291            lcall ?Set_Cursor_1 ; Select column and row
05CA D0E0       291            pop acc
05CC C083       292            push dph
05CE C082       292            push dpl
05D0 C0E0       292            push acc
05D2 9003B1     292            mov dptr, #Player_Wins
05D5 120346     292            lcall ?Send_Constant_String
05D8 D0E0       292            pop acc
05DA D082       292            pop dpl
05DC D083       292            pop dph
05DE C0E0       293            push acc
05E0 7407       293            mov a, #7
05E2 14         293            dec a
05E3 120353     293            lcall ?Set_Cursor_1 ; Select column and row
05E6 D0E0       293            pop acc
05E8            293   
05E8 C0E0       294            push acc
05EA 7431       294            mov a, #'1'
05EC 120312     294            lcall ?WriteData
05EF D0E0       294            pop acc
05F1 C0E0       295            push acc
05F3 7401       295            mov a, #1
05F5 14         295            dec a
05F6 120351     295            lcall ?Set_Cursor_2 ; Select column and row
05F9 D0E0       295            pop acc
05FB C083       296            push dph
05FD C082       296            push dpl
05FF C0E0       296            push acc
0601 9003C2     296            mov dptr, #Play_Again
0604 120346     296            lcall ?Send_Constant_String
0607 D0E0       296            pop acc
0609 D082       296            pop dpl
060B D083       296            pop dph
060D 020698     297            ljmp Reset
0610            298            
0610            299   Win_Routine2:
0610 7401       300            mov a, #0x01
0612 120317     300            lcall ?WriteCommand
0615 C002       301            push AR2
0617 7A02       301            mov R2, #2
0619 1202CD     301            lcall ?Wait_Milli_Seconds
061C D002       301            pop AR2
061E C0E0       302            push acc
0620 7401       302            mov a, #1
0622 14         302            dec a
0623 120353     302            lcall ?Set_Cursor_1 ; Select column and row
0626 D0E0       302            pop acc
0628 C083       303            push dph
062A C082       303            push dpl
062C C0E0       303            push acc
062E 9003B1     303            mov dptr, #Player_Wins
0631 120346     303            lcall ?Send_Constant_String
0634 D0E0       303            pop acc
0636 D082       303            pop dpl
0638 D083       303            pop dph
063A C0E0       304            push acc
063C 7407       304            mov a, #7
063E 14         304            dec a
063F 120353     304            lcall ?Set_Cursor_1 ; Select column and row
0642 D0E0       304            pop acc
0644            304   
0644 C0E0       305            push acc
0646 7432       305            mov a, #'2'
0648 120312     305            lcall ?WriteData
064B D0E0       305            pop acc
064D C0E0       306            push acc
064F 7401       306            mov a, #1
0651 14         306            dec a
0652 120351     306            lcall ?Set_Cursor_2 ; Select column and row
0655 D0E0       306            pop acc
0657 C083       307            push dph
0659 C082       307            push dpl
065B C0E0       307            push acc
065D 9003C2     307            mov dptr, #Play_Again
0660 120346     307            lcall ?Send_Constant_String
0663 D0E0       307            pop acc
0665 D082       307            pop dpl
0667 D083       307            pop dph
0669 020698     308            ljmp Reset      
066C            309            
066C            310            ; When pin0_period returns, a player will have either won a point or lost a 
066C            311            ; point (unless already at zero). Now we need to update scoreboard and 
066C            312            ; if there is a winner, declare the winner
066C            313   No_Win:
066C            314            ; to be done soon
066C C002       315            push AR2
066E 7AFA       315            mov R2, #250
0670 1202CD     315            lcall ?Wait_Milli_Seconds
0673 D002       315            pop AR2
0675 C002       316            push AR2
0677 7AFA       316            mov R2, #250
0679 1202CD     316            lcall ?Wait_Milli_Seconds
067C D002       316            pop AR2
067E C002       317            push AR2
0680 7AFA       317            mov R2, #250
0682 1202CD     317            lcall ?Wait_Milli_Seconds
0685 D002       317            pop AR2
0687 C002       318            push AR2
0689 7AFA       318            mov R2, #250
068B 1202CD     318            lcall ?Wait_Milli_Seconds
068E D002       318            pop AR2
0690            319            
0690            320            ; Wait a random time before playing the next sound
0690            321            ; Once a sound plays, it plays indefinitely till a slap occurs
0690            322            ; Once a slap occurs, calculate points, and wait to play the next sound
0690            323            ; To wait for a slap to occur, potentially use some sort of loop
0690            324            ;Wait_Milli_Seconds(#250)
0690            325            ;Wait_Milli_Seconds(#250)       
0690 C28C       326            clr TR0
0692 1204C1     327            lcall Wait_Random ; wait a random amount of time before playing the next tone
0695 020560     328            ljmp forever
0698            329   
0698            330   Reset:
0698 2084FD     331            jb RESET_BUTTON, Reset
069B 0204FE     332            ljmp main2
069E            333            
069E            334   tooSlow:
069E C28E       335            clr TR1
06A0 C202       336            clr abortFlag
06A2 C28C       337            clr TR0 ; stop the buzzer
06A4 C002       338            push AR2
06A6 7AFA       338            mov R2, #250
06A8 1202CD     338            lcall ?Wait_Milli_Seconds
06AB D002       338            pop AR2
06AD C002       339            push AR2
06AF 7AFA       339            mov R2, #250
06B1 1202CD     339            lcall ?Wait_Milli_Seconds
06B4 D002       339            pop AR2
06B6 020560     340            ljmp forever
06B9            341   
06B9            342   ; Determine period of 555 Timer for player 1
06B9            343   pin0period: 
06B9 2002E2     344            jb abortFlag, tooSlow
06BC            345       ; synchronize with rising edge of the signal applied to pin P0.0
06BC C2CA       346       clr TR2 ; Stop timer 2
06BE 75CC00     347       mov TL2, #0
06C1 75CD00     348       mov TH2, #0
06C4 C2CF       349       clr TF2 ; clear timer2 overflow flag
06C6 D2CA       350       setb TR2
06C8            351   synch1:
06C8 20CF41     352            jb TF2, no_signal0_helper_again ; If the timer overflows, we assume there is no signal
06CB 2080FA     353       jb P0.0, synch1
06CE            354   synch2:    
06CE 20CF3B     355            jb TF2, no_signal0_helper_again
06D1 3080FA     356       jnb P0.0, synch2
06D4            357       
06D4            358       ; Measure the period of the signal applied to pin P0.0
06D4 C2CA       359       clr TR2
06D6 75CC00     360       mov TL2, #0
06D9 75CD00     361       mov TH2, #0
06DC C2CF       362       clr TF2
06DE D2CA       363       setb TR2 ; Start timer 2
06E0            364   measure1:
06E0 20CF6C     365            jb TF2, no_signal_helper
06E3 2080FA     366       jb P0.0, measure1
06E6            367   measure2:    
06E6 20CF66     368            jb TF2, no_signal_helper
06E9 3080FA     369       jnb P0.0, measure2
06EC C2CA       370       clr TR2 ; Stop timer 2, [TH2,TL2] * 45.21123ns is the period
06EE 75349B     371            mov y+0, #low (45211 % 0x10000) 
06F1 7535B0     371            mov y+1, #high(45211 % 0x10000) 
06F4 753600     371            mov y+2, #low (45211 / 0x10000) 
06F7 753700     371            mov y+3, #high(45211 / 0x10000) 
06FA 85CC30     372       mov x+0, TL2
06FD 85CD31     373       mov x+1, TH2
0700 753200     374       mov x+2, #0
0703 753300     375       mov x+3, #0
0706 1201A6     376       lcall mul32
0709 02070F     377            ljmp next
070C            378   no_signal0_helper_again:
070C 02074F     379            ljmp no_signal_helper
070F            380       next:
070F 7534E8     381            mov y+0, #low (1000 % 0x10000) 
0712 753503     381            mov y+1, #high(1000 % 0x10000) 
0715 753600     381            mov y+2, #low (1000 / 0x10000) 
0718 753700     381            mov y+3, #high(1000 / 0x10000) 
071B 120233     382       lcall div32
071E            383        ; x has the period at this point
071E 12002C     384       lcall hex2bcd
0721            385       ;Set_cursor(2,1)
0721            386       ;lcall Display_10_digit_BCD
0721 7534D8     387            mov y+0, #low (407000 % 0x10000) 
0724 753535     387            mov y+1, #high(407000 % 0x10000) 
0727 753606     387            mov y+2, #low (407000 / 0x10000) 
072A 753700     387            mov y+3, #high(407000 / 0x10000) 
072D 120150     388       lcall x_gt_y
0730 20004F     389       jb mf, pin1period
0733 753410     390            mov y+0, #low (394000 % 0x10000) 
0736 753503     390            mov y+1, #high(394000 % 0x10000) 
0739 753606     390            mov y+2, #low (394000 / 0x10000) 
073C 753700     390            mov y+3, #high(394000 / 0x10000) 
073F 120134     391       lcall x_lt_y
0742 200030     392       jb mf, no_signal
0745 C28C       393       clr TR0 ; when a hit is detected, stop the buzzer
0747            394       ; Handle winning a point
0747 200108     395       jb HLbit, dec_score1
074A            396       ;mov a, Score1
074A            397       ;add a, #1
074A            398       ;da a
074A            399       ;mov Score1, a
074A 0543       400       inc Score1
074C 020758     401       ljmp pin0_return
074F            402       
074F            403   no_signal_helper:
074F 020775     404            ljmp no_signal
0752            405       
0752            406   dec_score1:
0752 E543       407            mov a, Score1
0754 6002       408            jz pin0_return
0756            409            ;add a, #99
0756            410            ;da a
0756            411            ;mov Score1, a
0756 1543       412            dec Score1
0758            413   
0758            414   pin0_return:
0758            415            ; Convert the result to BCD and display on LCD
0758 C0E0       416            push acc
075A 7409       416            mov a, #9
075C 14         416            dec a
075D 120353     416            lcall ?Set_Cursor_1 ; Select column and row
0760 D0E0       416            pop acc
0762 854330     417            mov x, Score1
0765 120778     418            lcall zero_3x_bytes_0
0768 12002C     419            lcall hex2bcd
076B            420            ;lcall Display_10_digit_BCD
076B C000       421            push ar0
076D A843       421            mov r0, Score1
076F 120358     421            lcall ?Display_BCD
0772 D000       421            pop ar0
0774 22         422       ret 
0775            423   
0775            424   no_signal:       
0775 020782     425       ljmp pin1period
0778            426   
0778            427   zero_3x_bytes_0:
0778 753100     428            mov x+1, #0
077B 753200     429            mov x+2, #0
077E 753300     430            mov x+3, #0
0781 22         431            ret
0782            432   
0782            433   ; Determine period for 555 timer for player 2
0782            434   pin1period:
0782 C002       435            push AR2
0784 7A64       435            mov R2, #100
0786 1202CD     435            lcall ?Wait_Milli_Seconds
0789 D002       435            pop AR2
078B            436            
078B            437       ; synchronize with rising edge of the signal applied to pin P0.0
078B C2CA       438       clr TR2 ; Stop timer 2
078D 75CC00     439       mov TL2, #0
0790 75CD00     440       mov TH2, #0
0793 C2CF       441       clr TF2 ; clear timer1 overflow flag
0795 D2CA       442       setb TR2
0797            443   synch1_1:
0797 20CF18     444            jb TF2, no_signal_helper_again ; If the timer overflows, we assume there is no signal
079A 2081FA     445       jb P0.1, synch1_1
079D            446   synch2_1:    
079D 20CF12     447            jb TF2, no_signal_helper_again
07A0 3081FA     448       jnb P0.1, synch2_1
07A3            449       
07A3            450       ; Measure the period of the signal applied to pin P0.0
07A3 C2CA       451       clr TR2
07A5 75CC00     452       mov TL2, #0
07A8 75CD00     453       mov TH2, #0
07AB C2CF       454       clr TF2
07AD D2CA       455       setb TR2 ; Start timer 2
07AF 0207B5     456            ljmp measure1_1
07B2            457   no_signal_helper_again:
07B2 02081B     458            ljmp no_signal_1_helper
07B5            459   measure1_1:
07B5 20CF63     460            jb TF2, no_signal_1_helper
07B8 2081FA     461       jb P0.1, measure1_1
07BB            462   measure2_1:    
07BB 20CF5D     463            jb TF2, no_signal_1_helper
07BE 3081FA     464       jnb P0.1, measure2_1
07C1 C2CA       465       clr TR2 ; Stop timer 2, [TH2,TL2] * 45.21123ns is the period
07C3 75349B     466            mov y+0, #low (45211 % 0x10000) 
07C6 7535B0     466            mov y+1, #high(45211 % 0x10000) 
07C9 753600     466            mov y+2, #low (45211 / 0x10000) 
07CC 753700     466            mov y+3, #high(45211 / 0x10000) 
07CF 85CC30     467       mov x+0, TL2
07D2 85CD31     468       mov x+1, TH2
07D5            469       ;Set_cursor(2,4)
07D5 753200     470       mov x+2, #0
07D8 753300     471       mov x+3, #0
07DB 1201A6     472       lcall mul32
07DE 7534E8     473            mov y+0, #low (1000 % 0x10000) 
07E1 753503     473            mov y+1, #high(1000 % 0x10000) 
07E4 753600     473            mov y+2, #low (1000 / 0x10000) 
07E7 753700     473            mov y+3, #high(1000 / 0x10000) 
07EA 120233     474       lcall div32
07ED            475       ; x has the period at this point
07ED            476       ;Set_cursor(1,1)
07ED            477       ;lcall hex2bcd
07ED            478       ;lcall Display_10_digit_BCD
07ED 7534C0     479            mov y+0, #low (440000 % 0x10000) 
07F0 7535B6     479            mov y+1, #high(440000 % 0x10000) 
07F3 753606     479            mov y+2, #low (440000 / 0x10000) 
07F6 753700     479            mov y+3, #high(440000 / 0x10000) 
07F9 120150     480       lcall x_gt_y
07FC 200042     481       jb mf, no_signal_1
07FF            482       ;lcall hex2bcd
07FF            483       ;lcall Display_10_digit_BCD
07FF 753420     484            mov y+0, #low (404000 % 0x10000) 
0802 75352A     484            mov y+1, #high(404000 % 0x10000) 
0805 753606     484            mov y+2, #low (404000 / 0x10000) 
0808 753700     484            mov y+3, #high(404000 / 0x10000) 
080B 120134     485       lcall x_lt_y
080E 200030     486       jb mf, no_signal_1
0811            487       
0811 C28C       488       clr TR0 ; when a hit is detected, stop the buzzer
0813            489   ; Handle a press depending on tone
0813 200108     490       jb HLbit, dec_score2
0816            491       ;mov a, Score2
0816            492       ;add a, #1
0816            493       ;da a
0816            494       ;mov Score1, a
0816 0544       495       inc Score2
0818 020824     496       ljmp pin1_return
081B            497       
081B            498   no_signal_1_helper:
081B 020841     499            ljmp no_signal_1
081E            500       
081E            501   dec_score2:
081E E544       502            mov a, Score2
0820 6002       503            jz pin1_return ; if already zero, go to end
0822            504            ;add a, #99
0822            505            ;da a
0822            506            ;mov Score2, a
0822 1544       507            dec Score2
0824            508   
0824            509   pin1_return:
0824            510            ; Convert the result to BCD and display on LCD
0824 C0E0       511            push acc
0826 7409       511            mov a, #9
0828 14         511            dec a
0829 120351     511            lcall ?Set_Cursor_2 ; Select column and row
082C D0E0       511            pop acc
082E 854430     512            mov x, Score2
0831 120844     513            lcall zero_3x_bytes_1
0834 12002C     514            lcall hex2bcd
0837            515            ;lcall Display_10_digit_BCD
0837 C000       516            push ar0
0839 A844       516            mov r0, Score2
083B 120358     516            lcall ?Display_BCD
083E D000       516            pop ar0
0840 22         517       ret 
0841            518       
0841            519   no_signal_1:     
0841 0206B9     520       ljmp pin0period ; Repeat! 
0844            521       
0844            522   zero_3x_bytes_1:
0844 753100     523            mov x+1, #0
0847 753200     524            mov x+2, #0
084A 753300     525            mov x+3, #0
084D 22         526            ret
084E            527   end
