                  2   $LIST
0000              4   
0000              5   org 0000H
0000 0204C6       6      ljmp main
0003              7      
0003              8   ; Timer/Counter 0 overflow interrupt vector
000B              9   org 0x000B
000B 0203E2      10            ljmp Timer0_ISR
000E             11   ; Timer/Counter 1 overflow interrupt vector
001B             12   org 0x001B
001B 0203E5      13            ljmp Timer1_ISR   
001E             14   ; Timer/Counter 2 overflow interrupt vector
002B             15   org 0x002B
002B 32          16       reti
002C             17   
002C             18   ; These register definitions needed by 'math32.inc'
0030             19   DSEG at 30H
0030             20   x:   ds 4
0034             21   y:   ds 4
0038             22   bcd: ds 5
003D             23   Count1ms: ds 2
003F             24   
003F             25   Seed: ds 4
0043             26   Score1: ds 1
0044             27   Score2: ds 1
0045             28   
0000             29   BSEG
0000             30   mf: dbit 1
0001             31   HLbit: dbit 1
0002             32   abortFlag: dbit 1
0003             33   
0003             34   PlayerWin: dbit 1 ; flag to tell who won: 0 - playerOne, 1 - playerTwo
0004             35   
                570   $LIST
                 37   $LIST
02C2             39   
02C2             40   cseg
02C2             41   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
02C2             42   
02C2             43   TIMER0_RATE1   EQU 4000     ; 2000Hz squarewave (peak amplitude of CEM-1203 speaker) ; Pin 1.1
02C2             44   TIMER0_RELOAD1 EQU ((65536-(CLK/TIMER0_RATE1))) ; LOW TONE
02C2             45   TIMER0_RATE2   EQU 4200     ; 2100Hz squarewave (peak amplitude of CEM-1203 speaker) ; Pin 1.1
02C2             46   TIMER0_RELOAD2 EQU ((65536-(CLK/TIMER0_RATE2))) ; HIGH TONE
02C2             47   TIMER1_RATE1   EQU 500     ; 250Hz squarewave (peak amplitude of CEM-1203 speaker) ; Pin 1.1
02C2             48   TIMER1_RELOAD1 EQU ((65536-(CLK/TIMER1_RATE1))) ; LOW TONE
02C2             49   
02C2             50   
02C2             51   ; These 'equ' must match the hardware wiring
02C2             52   LCD_RS equ P3.2
02C2             53   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
02C2             54   LCD_E  equ P3.3
02C2             55   LCD_D4 equ P3.4
02C2             56   LCD_D5 equ P3.5
02C2             57   LCD_D6 equ P3.6
02C2             58   LCD_D7 equ P3.7
02C2             59   
02C2             60   SOUND_OUT equ P1.1
02C2             61   BOOT_BUTTON equ P4.5
02C2             62   
                 64   	$LIST
036E             66   
036E             67   ;                     1234567890123456    <- This helps determine the location of the counter
036E 50657269    68   Initial_Message:  db 'Period (ns):   ', 0
     6F642028
     6E73293A
     20202000
037E 4E6F2073    69   No_Signal_Str:    db 'No signal      ', 0
     69676E61
     6C202020
     20202000
038E 4E6F2073    70   No_Signal_Str1:  db 'No signal T1', 0
     69676E61
     6C205431
     00
039B             71   
039B             72   ; Sends 10-digit BCD number in bcd to the LCD
039B             73   Display_10_digit_BCD:
039B C000        74            push ar0
039D A83C        74            mov r0, bcd+4
039F 120358      74            lcall ?Display_BCD
03A2 D000        74            pop ar0
03A4 C000        75            push ar0
03A6 A83B        75            mov r0, bcd+3
03A8 120358      75            lcall ?Display_BCD
03AB D000        75            pop ar0
03AD C000        76            push ar0
03AF A83A        76            mov r0, bcd+2
03B1 120358      76            lcall ?Display_BCD
03B4 D000        76            pop ar0
03B6 C000        77            push ar0
03B8 A839        77            mov r0, bcd+1
03BA 120358      77            lcall ?Display_BCD
03BD D000        77            pop ar0
03BF C000        78            push ar0
03C1 A838        78            mov r0, bcd+0
03C3 120358      78            lcall ?Display_BCD
03C6 D000        78            pop ar0
03C8 22          79            ret
03C9             80            
03C9             81   ;---------------------------------;
03C9             82   ; Routine to initialize the ISR   ;
03C9             83   ; for timer 0                     ;
03C9             84   ;---------------------------------;
03C9             85   Timer0_Init:
03C9 E589        86            mov a, TMOD
03CB 54F0        87            anl a, #0xf0 ; Clear the bits for timer 0
03CD 4401        88            orl a, #0x01 ; Configure timer 0 as 16-timer
03CF F589        89            mov TMOD, a
03D1 758CEA      90            mov TH0, #high(TIMER0_RELOAD1)
03D4 758A67      91            mov TL0, #low(TIMER0_RELOAD1)
03D7             92            ; Set autoreload value
03D7 75F4EA      93            mov RH0, #high(TIMER0_RELOAD1)
03DA 75F267      94            mov RL0, #low(TIMER0_RELOAD1)
03DD             95            ; Enable the timer and interrupts
03DD D2A9        96       setb ET0  ; Enable timer 0 interrupt
03DF C28C        97       clr TR0  ; DONT start timer 0 yet
03E1 22          98            ret
03E2             99   
03E2            100   ;---------------------------------;
03E2            101   ; ISR for timer 0.
03E2            102   ;---------------------------------;
03E2            103   Timer0_ISR:
03E2            104            ;clr TF0  ; According to the data sheet this is done for us already.
03E2 B291       105            cpl SOUND_OUT ; Connect speaker to P1.1!
03E4 32         106            reti
03E5            107   
03E5            108   Timer1_ISR: 
03E5            109            ;clr TF1 ; According to data sheet this is done for us already.
03E5 C0E0       110            push acc
03E7 C0D0       111            push psw
03E9            112            
03E9 053D       113            inc Count1ms+0
03EB E53D       114            mov a, Count1ms+0
03ED 7002       115            jnz Inc_Done
03EF 053E       116            inc Count1ms+1
03F1            117   
03F1            118   Inc_Done:
03F1 E53D       119       mov a, Count1ms+0
03F3 B4E80C     120       cjne a, #low(1000), Timer1_ISR_done
03F6 E53E       121       mov a, Count1ms+1
03F8 B40307     122       cjne a, #high(1000), Timer1_ISR_done
03FB            123   
03FB D202       124            setb abortFlag
03FD E4         125            clr a 
03FE            126            
03FE F53D       127            mov Count1ms+0, a
0400 F53E       128            mov Count1ms+1, a
0402            129            
0402            130   Timer1_ISR_done:
0402            131       ;Set_cursor(2,7)
0402            132       ;Display_char(#'g')
0402 D0D0       133       pop psw
0404 D0E0       134       pop acc
0406            135       
0406 32         136            reti
0407            137   
0407            138   InitTimer1:
0407 E589       139            mov a, TMOD
0409 540F       140            anl a, #0x0f ; Clear the bits for timer 1
040B 4410       141            orl a, #0x10 ; Configure timer 1 as 16-timer
040D F589       142            mov TMOD, a
040F 758D53     143            mov TH1, #high(TIMER1_RELOAD1)
0412 758B34     144            mov TL1, #low(TIMER1_RELOAD1)
0415 E4         145            clr a
0416 F53D       146            mov Count1ms+0, a
0418 F53E       147            mov Count1ms+1, a
041A            148            ; Set autoreload value
041A 75F553     149            mov RH1, #high(TIMER1_RELOAD1)
041D 75F334     150            mov RL1, #low(TIMER1_RELOAD1)
0420 D2AB       151            setb ET1 ; set timer1 interrupt to 1
0422 C28E       152            clr TR1 ; don't start timer right away
0424 22         153            ret
0425            154   
0425            155   ;Initializes timer/counter 2 as a 16-bit timer
0425            156   InitTimer2:
0425 75C800     157            mov T2CON, #0 ; Stop timer/counter.  Set as timer (clock input is pin 22.1184MHz).
0428            158            ; Set the reload value on overflow to zero (just in case is not zero)
0428 75CB00     159            mov RCAP2H, #0
042B 75CA00     160            mov RCAP2L, #0
042E D2AD       161            setb ET2
0430 22         162       ret
0431            163       
0431            164   Init_Seed:
0431            165            ; Wait for a push of the BOOT button
0431            166            ; to initialize random seed:
0431 D2CA       167            setb TR2
0433 20C5FD     168            jb BOOT_BUTTON, $
0436 C0E0       169            push acc
0438 7401       169            mov a, #1
043A 14         169            dec a
043B 120351     169            lcall ?Set_Cursor_2 ; Select column and row
043E D0E0       169            pop acc
0440 C0E0       170            push acc
0442 7421       170            mov a, #'!'
0444 120312     170            lcall ?WriteData
0447 D0E0       170            pop acc
0449 85CD3F     171            mov Seed+0, TH2
044C 754001     172            mov Seed+1, #0x01
044F 754187     173       mov Seed+2, #0x87
0452 85CC42     174       mov Seed+3, TL2
0455 C2CA       175       clr TR2
0457 22         176       ret
0458            177       
0458            178   Random:
0458            179            ; Seed = 214013*Seed + 2531011
0458 853F30     180            mov x+0, Seed+0
045B 854031     181            mov x+1, Seed+1
045E 854132     182            mov x+2, Seed+2
0461 854233     183            mov x+3, Seed+3
0464 7534FD     184            mov y+0, #low (214013 % 0x10000) 
0467 753543     184            mov y+1, #high(214013 % 0x10000) 
046A 753603     184            mov y+2, #low (214013 / 0x10000) 
046D 753700     184            mov y+3, #high(214013 / 0x10000) 
0470 1201A6     185            lcall mul32
0473 7534C3     186            mov y+0, #low (2531011 % 0x10000) 
0476 75359E     186            mov y+1, #high(2531011 % 0x10000) 
0479 753626     186            mov y+2, #low (2531011 / 0x10000) 
047C 753700     186            mov y+3, #high(2531011 / 0x10000) 
047F 1200F1     187            lcall add32
0482 85303F     188            mov Seed+0, x+0
0485 853140     189            mov Seed+1, x+1
0488 853241     190            mov Seed+2, x+2
048B 853342     191            mov Seed+3, x+3
048E 22         192            ret
048F            193   
048F            194   Wait_Random:
048F C002       195            push AR2
0491 AA3F       195            mov R2, Seed+0
0493 1202CD     195            lcall ?Wait_Milli_Seconds
0496 D002       195            pop AR2
0498 C002       196            push AR2
049A AA40       196            mov R2, Seed+1
049C 1202CD     196            lcall ?Wait_Milli_Seconds
049F D002       196            pop AR2
04A1 C002       197            push AR2
04A3 AA41       197            mov R2, Seed+2
04A5 1202CD     197            lcall ?Wait_Milli_Seconds
04A8 D002       197            pop AR2
04AA C002       198            push AR2
04AC AA42       198            mov R2, Seed+3
04AE 1202CD     198            lcall ?Wait_Milli_Seconds
04B1 D002       198            pop AR2
04B3 22         199            ret
04B4            200   
04B4            201   ;---------------------------------;
04B4            202   ; Hardware initialization         ;
04B4            203   ;---------------------------------;
04B4            204   Initialize_All:
04B4 120425     205       lcall InitTimer2
04B7 1203C9     206       lcall Timer0_Init
04BA 120407     207       lcall InitTImer1
04BD 12031C     208       lcall LCD_4BIT ; Initialize LCD
04C0 D2AF       209       setb EA
04C2 120431     210       lcall Init_Seed
04C5            211            
04C5 22         212            ret
04C6            213   
04C6            214   ;---------------------------------;
04C6            215   ; Main program loop               ;
04C6            216   ;---------------------------------;
04C6            217   main:
04C6            218       ; Initialize the hardware:
04C6 75817F     219       mov SP, #7FH
04C9 1204B4     220       lcall Initialize_All
04CC D280       221       setb P0.0 ; Pin is used as input for 555 timer for timer/counter2
04CE D281       222       setb P0.1 ; Pin for 555 timer for timer/counter1
04D0 C201       223       clr HLbit 
04D2 C28C       224       clr TR0 ; clear timer 0 so no sound when game first starts
04D4 C202       225       clr abortFlag
04D6 754300     226       mov Score1, #0
04D9 754400     227       mov Score2, #0
04DC            228       
04DC C2A0       229       clr P2.0
04DE            230   
04DE C0E0       231            push acc
04E0 7401       231            mov a, #1
04E2 14         231            dec a
04E3 120353     231            lcall ?Set_Cursor_1 ; Select column and row
04E6 D0E0       231            pop acc
04E8            232       ;Send_Constant_String(#Initial_Message) 
04E8            233       
04E8            234   ; LETS SAY HIGHER TONE IS BADDDDDD
04E8            235   forever:
04E8            236   
04E8            237            ; First part of the game: decide which freq to buzz at
04E8 120458     238            lcall Random
04EB E540       239            mov a, Seed+1
04ED A2E3       240            mov c, acc.3
04EF 9201       241            mov HLbit, c
04F1 4009       242            jc setup_tone2 ; if carry is one, we play tone2
04F3            243            ; if carry is zero, we play tone1, the LOW tone
04F3 75F4EA     244            mov RH0, #high(TIMER0_RELOAD1)
04F6 75F267     245            mov RL0, #low(TIMER0_RELOAD1)
04F9 020502     246            ljmp play
04FC            247            
04FC            248            setup_tone2: ; get ready to play tone2, the HIGH tone
04FC 75F4EB     249                    mov RH0, #high(TIMER0_RELOAD2)
04FF 75F26E     250                    mov RL0, #low(TIMER0_RELOAD2)
0502            251            
0502            252            
0502            253            play: ; activates tone
0502 D28E       254                    setb TR1 ; start timer1 
0504 D28C       255                    setb TR0
0506            256            
0506 12053F     257            lcall pin0period ; start check for capacitance (resulting in period) change
0509            258            
0509            259            ; When pin0_period returns, a player will have either won a point or lost a 
0509            260            ; point (unless already at zero). Now we need to update scoreboard and 
0509            261            ; if there is a winner, declare the winner
0509            262            
0509            263            ; to be done soon
0509            264            
0509            265            
0509            266            ; Wait a random time before playing the next sound
0509            267            ; Once a sound plays, it plays indefinitely till a slap occurs
0509            268            ; Once a slap occurs, calculate points, and wait to play the next sound
0509            269            ; To wait for a slap to occur, potentially use some sort of loop
0509            270            
0509 C28C       271            clr TR0
050B 12048F     272            lcall Wait_Random ; wait a random amount of time before playing the next tone
050E 0204E8     273            ljmp forever
0511            274            
0511            275   tooSlow:
0511 C28E       276            clr TR1
0513 C202       277            clr abortFlag
0515 C28C       278            clr TR0 ; stop the buzzer
0517 C002       279            push AR2
0519 7AFA       279            mov R2, #250
051B 1202CD     279            lcall ?Wait_Milli_Seconds
051E D002       279            pop AR2
0520 C002       280            push AR2
0522 7AFA       280            mov R2, #250
0524 1202CD     280            lcall ?Wait_Milli_Seconds
0527 D002       280            pop AR2
0529 C0E0       281            push acc
052B 740C       281            mov a, #12
052D 14         281            dec a
052E 120353     281            lcall ?Set_Cursor_1 ; Select column and row
0531 D0E0       281            pop acc
0533 C0E0       282            push acc
0535 7424       282            mov a, #'$'
0537 120312     282            lcall ?WriteData
053A D0E0       282            pop acc
053C 0204E8     283            ljmp forever
053F            284   
053F            285   ; Determine period of 555 Timer for player 1
053F            286   pin0period: 
053F 2002CF     287            jb abortFlag, tooSlow
0542            288       ; synchronize with rising edge of the signal applied to pin P0.0
0542 C2CA       289       clr TR2 ; Stop timer 2
0544 75CC00     290       mov TL2, #0
0547 75CD00     291       mov TH2, #0
054A C2CF       292       clr TF2 ; clear timer2 overflow flag
054C D2CA       293       setb TR2
054E            294   synch1:
054E 20CF69     295            jb TF2, no_signal_helper ; If the timer overflows, we assume there is no signal
0551 2080FA     296       jb P0.0, synch1
0554            297   synch2:    
0554 20CF63     298            jb TF2, no_signal_helper
0557 3080FA     299       jnb P0.0, synch2
055A            300       
055A            301       ; Measure the period of the signal applied to pin P0.0
055A C2CA       302       clr TR2
055C 75CC00     303       mov TL2, #0
055F 75CD00     304       mov TH2, #0
0562 C2CF       305       clr TF2
0564 D2CA       306       setb TR2 ; Start timer 2
0566            307   measure1:
0566 20CF77     308            jb TF2, no_signal
0569 2080FA     309       jb P0.0, measure1
056C            310   measure2:    
056C 20CF71     311            jb TF2, no_signal
056F 3080FA     312       jnb P0.0, measure2
0572 C2CA       313       clr TR2 ; Stop timer 2, [TH2,TL2] * 45.21123ns is the period
0574 75349B     314            mov y+0, #low (45211 % 0x10000) 
0577 7535B0     314            mov y+1, #high(45211 % 0x10000) 
057A 753600     314            mov y+2, #low (45211 / 0x10000) 
057D 753700     314            mov y+3, #high(45211 / 0x10000) 
0580 85CC30     315       mov x+0, TL2
0583 85CD31     316       mov x+1, TH2
0586 753200     317       mov x+2, #0
0589 753300     318       mov x+3, #0
058C 1201A6     319       lcall mul32
058F 7534E8     320            mov y+0, #low (1000 % 0x10000) 
0592 753503     320            mov y+1, #high(1000 % 0x10000) 
0595 753600     320            mov y+2, #low (1000 / 0x10000) 
0598 753700     320            mov y+3, #high(1000 / 0x10000) 
059B 120233     321       lcall div32
059E            322       
059E 753480     323            mov y+0, #low (208000 % 0x10000) 
05A1 75352C     323            mov y+1, #high(208000 % 0x10000) 
05A4 753603     323            mov y+2, #low (208000 / 0x10000) 
05A7 753700     323            mov y+3, #high(208000 / 0x10000) 
05AA 120134     324       lcall x_lt_y
05AD 200030     325       jb mf, no_signal
05B0            326       
05B0 C28C       327       clr TR0 ; when a hit is detected, stop the buzzer
05B2            328       ; Handle winning a point
05B2 200108     329       jb HLbit, dec_score1
05B5            330       ;mov a, Score1
05B5            331       ;add a, #1
05B5            332       ;da a
05B5            333       ;mov Score1, a
05B5 0543       334       inc Score1
05B7 0205C3     335       ljmp pin0_return
05BA            336       
05BA            337   no_signal_helper:
05BA 0205E0     338            ljmp no_signal
05BD            339       
05BD            340   dec_score1:
05BD E543       341            mov a, Score1
05BF 6002       342            jz pin0_return
05C1            343            ;add a, #99
05C1            344            ;da a
05C1            345            ;mov Score1, a
05C1 1543       346            dec Score1
05C3            347   
05C3            348   pin0_return:
05C3            349            ; Convert the result to BCD and display on LCD
05C3 C0E0       350            push acc
05C5 7401       350            mov a, #1
05C7 14         350            dec a
05C8 120353     350            lcall ?Set_Cursor_1 ; Select column and row
05CB D0E0       350            pop acc
05CD 854330     351            mov x, Score1
05D0 1205F6     352            lcall zero_3x_bytes_0
05D3 12002C     353            lcall hex2bcd
05D6            354            ;lcall Display_10_digit_BCD
05D6 C000       355            push ar0
05D8 A843       355            mov r0, Score1
05DA 120358     355            lcall ?Display_BCD
05DD D000       355            pop ar0
05DF 22         356       ret 
05E0            357   
05E0            358   no_signal:       
05E0 C0E0       359            push acc
05E2 740F       359            mov a, #15
05E4 14         359            dec a
05E5 120351     359            lcall ?Set_Cursor_2 ; Select column and row
05E8 D0E0       359            pop acc
05EA C0E0       360            push acc
05EC 7421       360            mov a, #'!'
05EE 120312     360            lcall ?WriteData
05F1 D0E0       360            pop acc
05F3 020600     361       ljmp pin1period
05F6            362   
05F6            363   zero_3x_bytes_0:
05F6 753100     364            mov x+1, #0
05F9 753200     365            mov x+2, #0
05FC 753300     366            mov x+3, #0
05FF 22         367            ret
0600            368   
0600            369   ; Determine period for 555 timer for player 2
0600            370   pin1period:
0600            371       ; synchronize with rising edge of the signal applied to pin P0.0
0600 C2CA       372       clr TR2 ; Stop timer 2
0602 75CC00     373       mov TL2, #0
0605 75CD00     374       mov TH2, #0
0608 C2CF       375       clr TF2 ; clear timer1 overflow flag
060A D2CA       376       setb TR2
060C            377   synch1_1:
060C 20CF69     378            jb TF2, no_signal_1_helper ; If the timer overflows, we assume there is no signal
060F 2081FA     379       jb P0.1, synch1_1
0612            380   synch2_1:    
0612 20CF63     381            jb TF2, no_signal_1_helper
0615 3081FA     382       jnb P0.1, synch2_1
0618            383       
0618            384       ; Measure the period of the signal applied to pin P0.0
0618 C2CA       385       clr TR2
061A 75CC00     386       mov TL2, #0
061D 75CD00     387       mov TH2, #0
0620 C2CF       388       clr TF2
0622 D2CA       389       setb TR2 ; Start timer 2
0624            390   measure1_1:
0624 20CF77     391            jb TF2, no_signal_1
0627 2081FA     392       jb P0.1, measure1_1
062A            393   measure2_1:    
062A 20CF71     394            jb TF2, no_signal_1
062D 3081FA     395       jnb P0.1, measure2_1
0630 C2CA       396       clr TR2 ; Stop timer 2, [TH2,TL2] * 45.21123ns is the period
0632 75349B     397            mov y+0, #low (45211 % 0x10000) 
0635 7535B0     397            mov y+1, #high(45211 % 0x10000) 
0638 753600     397            mov y+2, #low (45211 / 0x10000) 
063B 753700     397            mov y+3, #high(45211 / 0x10000) 
063E 85CC30     398       mov x+0, TL2
0641 85CD31     399       mov x+1, TH2
0644 753200     400       mov x+2, #0
0647 753300     401       mov x+3, #0
064A 1201A6     402       lcall mul32
064D 7534E8     403            mov y+0, #low (1000 % 0x10000) 
0650 753503     403            mov y+1, #high(1000 % 0x10000) 
0653 753600     403            mov y+2, #low (1000 / 0x10000) 
0656 753700     403            mov y+3, #high(1000 / 0x10000) 
0659 120233     404       lcall div32
065C            405       
065C 753480     406            mov y+0, #low (208000 % 0x10000) 
065F 75352C     406            mov y+1, #high(208000 % 0x10000) 
0662 753603     406            mov y+2, #low (208000 / 0x10000) 
0665 753700     406            mov y+3, #high(208000 / 0x10000) 
0668 120134     407       lcall x_lt_y
066B 200030     408       jb mf, no_signal_1
066E            409       
066E C28C       410       clr TR0 ; when a hit is detected, stop the buzzer
0670            411   ; Handle a press depending on tone
0670 200108     412       jb HLbit, dec_score2
0673            413       ;mov a, Score2
0673            414       ;add a, #1
0673            415       ;da a
0673            416       ;mov Score1, a
0673 0544       417       inc Score2
0675 020681     418       ljmp pin1_return
0678            419       
0678            420   no_signal_1_helper:
0678 02069E     421            ljmp no_signal_1
067B            422       
067B            423   dec_score2:
067B E544       424            mov a, Score2
067D 6002       425            jz pin1_return ; if already zero, go to end
067F            426            ;add a, #99
067F            427            ;da a
067F            428            ;mov Score2, a
067F 1544       429            dec Score2
0681            430   
0681            431   pin1_return:
0681            432            ; Convert the result to BCD and display on LCD
0681 C0E0       433            push acc
0683 7401       433            mov a, #1
0685 14         433            dec a
0686 120351     433            lcall ?Set_Cursor_2 ; Select column and row
0689 D0E0       433            pop acc
068B 854430     434            mov x, Score2
068E 1206B4     435            lcall zero_3x_bytes_1
0691 12002C     436            lcall hex2bcd
0694            437            ;lcall Display_10_digit_BCD
0694 C000       438            push ar0
0696 A844       438            mov r0, Score2
0698 120358     438            lcall ?Display_BCD
069B D000       438            pop ar0
069D 22         439       ret 
069E            440       
069E            441   no_signal_1:     
069E C0E0       442            push acc
06A0 740F       442            mov a, #15
06A2 14         442            dec a
06A3 120351     442            lcall ?Set_Cursor_2 ; Select column and row
06A6 D0E0       442            pop acc
06A8 C0E0       443            push acc
06AA 7421       443            mov a, #'!'
06AC 120312     443            lcall ?WriteData
06AF D0E0       443            pop acc
06B1 02053F     444       ljmp pin0period ; Repeat! 
06B4            445       
06B4            446   zero_3x_bytes_1:
06B4 753100     447            mov x+1, #0
06B7 753200     448            mov x+2, #0
06BA 753300     449            mov x+3, #0
06BD 22         450            ret
06BE            451   end
